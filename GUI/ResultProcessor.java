/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package COVID_AgentBasedSimulation.GUI;

import COVID_AgentBasedSimulation.Model.HardcodedSimulator.BatchRun;
import COVID_AgentBasedSimulation.Model.HardcodedSimulator.ClustererManager;
import COVID_AgentBasedSimulation.Model.HardcodedSimulator.Root;
import COVID_AgentBasedSimulation.Model.HardcodedSimulator.RootArtificial;
import COVID_AgentBasedSimulation.Model.Structure.City;
import COVID_AgentBasedSimulation.Model.Structure.Scope;
import java.io.File;
import java.util.ArrayList;
import java.util.Timer;
import java.util.TimerTask;
import java.util.concurrent.CopyOnWriteArrayList;

/**
 *
 * @author Amir Mohammad Esmaieeli Sikaroudi
 */
public class ResultProcessor extends javax.swing.JDialog {

    MainFrame myParent;

    Timer batchTimer;
    Timer waitTimer;
    Timer numberTimer;

    int localBatchCounter = 0;

    boolean isBatchRunnerRunning = false;
    boolean isCompleteBatchRunning = false;

    int scenarioCounter = 0;
    int numAgentCounter = 0;

    /**
     * Creates new form ResultProcessor
     */
    public ResultProcessor(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();

        myParent = (MainFrame) parent;
        jLabel5.setText(myParent.mainModel.ABM.studyScope);
        int numCBGs = 0;
        City temp = ((City) (myParent.mainModel.ABM.studyScopeGeography));
        for (int i = 0; i < temp.censusTracts.size(); i++) {
            for (int j = 0; j < temp.censusTracts.get(i).censusBlocks.size(); j++) {
                numCBGs = numCBGs + 1;
            }
        }
        jSpinner2.setValue(numCBGs);
    }

    public void processResults() {

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jToggleButton1 = new javax.swing.JToggleButton();
        jSpinner7 = new javax.swing.JSpinner();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jSpinner1 = new javax.swing.JSpinner();
        jSpinner2 = new javax.swing.JSpinner();
        jSpinner3 = new javax.swing.JSpinner();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jButton1.setText("Process");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jToggleButton1.setText("Run all experiments");
        jToggleButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton1ActionPerformed(evt);
            }
        });

        jSpinner7.setModel(new javax.swing.SpinnerNumberModel(5, 1, null, 1));

        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel1.setLayout(new java.awt.GridLayout(2, 3));

        jLabel1.setText("Reduced");
        jPanel1.add(jLabel1);

        jLabel2.setText("CBG");
        jPanel1.add(jLabel2);

        jLabel3.setText("Detailed");
        jPanel1.add(jLabel3);

        jSpinner1.setModel(new javax.swing.SpinnerNumberModel(1, 1, null, 1));
        jPanel1.add(jSpinner1);

        jSpinner2.setModel(new javax.swing.SpinnerNumberModel(1, 1, null, 1));
        jPanel1.add(jSpinner2);

        jSpinner3.setModel(new javax.swing.SpinnerNumberModel(1, 1, null, 1));
        jPanel1.add(jSpinner3);

        jLabel4.setText("Scope:");

        jLabel5.setText("jLabel5");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addContainerGap(337, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel5))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jToggleButton1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jSpinner7, javax.swing.GroupLayout.DEFAULT_SIZE, 99, Short.MAX_VALUE)))
                        .addGap(170, 170, 170))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jToggleButton1)
                    .addComponent(jSpinner7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 64, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String[] header = new String[9];
        ArrayList<String[]> siderHeader;
        ArrayList<String[]> data;
        header[3] = "1%";
        header[4] = "10%";
        header[5] = "25%";
        header[6] = "50%";
        header[7] = "75%";
        header[8] = "100%";
        String[] tessellations = new String[10];
        tessellations[0] = "NT";
        tessellations[1] = "VD";
        tessellations[2] = "XMEANS_VD";
        tessellations[3] = "RMCBG_VD";
        tessellations[4] = "CBG";
        tessellations[5] = "VD_CBG";
        tessellations[6] = "XMEANS_CBG";
        tessellations[7] = "CBGVD";
        tessellations[8] = "VD_CBGVD";
        tessellations[9] = "XMEANS_CBGVD";
        siderHeader=new ArrayList(tessellations.length*3+1);//Expected number of rows
        String root = "projects" + File.separator + myParent.mainModel.ABM.filePath.substring(myParent.mainModel.ABM.filePath.lastIndexOf(File.separator) + 1, myParent.mainModel.ABM.filePath.length());
        File directory = new File(root);
        for (int k = 0; k < 6; k++) {
            for (int i = 0; i < tessellations.length; i++) {
                for (int j = 0; j < 3; j++) {
                    
                }
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton1ActionPerformed
        int[] numAgents = new int[6];
        numAgents[0] = (int) Math.round(((City) (myParent.mainModel.ABM.studyScopeGeography)).population * 0.01);
        numAgents[1] = (int) Math.round(((City) (myParent.mainModel.ABM.studyScopeGeography)).population * 0.1);
        numAgents[2] = (int) Math.round(((City) (myParent.mainModel.ABM.studyScopeGeography)).population * 0.25);
        numAgents[3] = (int) Math.round(((City) (myParent.mainModel.ABM.studyScopeGeography)).population * 0.5);
        numAgents[4] = (int) Math.round(((City) (myParent.mainModel.ABM.studyScopeGeography)).population * 0.75);
        numAgents[5] = (int) Math.round(((City) (myParent.mainModel.ABM.studyScopeGeography)).population);
        if (jToggleButton1.isSelected()) {
            numberTimer = new Timer();
            numAgentCounter = 0;
            numberTimer.schedule(new TimerTask() {
                @Override
                public void run() {
                    if (isCompleteBatchRunning == false) {
                        if (numAgentCounter < numAgents.length) {
                            runBatchesForNumAgents(numAgents[numAgentCounter]);
                            System.out.println("Started complete batch run for num: " + numAgents[numAgentCounter]);
                            numAgentCounter = numAgentCounter + 1;
                        }else{
                            numberTimer.cancel();
                            numberTimer.purge();
                            System.out.println("All runs finished!");
                            isCompleteBatchRunning=false;
                            jToggleButton1.setSelected(false);
                        }
                    }
                }
            }, 0, 1000);
        } else {
            waitTimer.cancel();
            waitTimer.purge();
            numberTimer.cancel();
            numberTimer.purge();
            System.out.println("Runs aborted");
        }
    }//GEN-LAST:event_jToggleButton1ActionPerformed

    public void runBatchesForNumAgents(int numAgents) {
        isCompleteBatchRunning = true;
        String[] scenarios = new String[10];
        scenarios[0] = "noTessellation";
        scenarios[1] = "CBG";
        scenarios[2] = "CBGVDFMTH";
        scenarios[3] = "VDFMTH";
        scenarios[4] = "VD_CBG";
        scenarios[5] = "VD_CBGVD";
        scenarios[6] = "Xmeans_" + String.valueOf((int) (jSpinner1.getValue()));
        scenarios[7] = "Xmeans_" + String.valueOf((int) (jSpinner2.getValue()));
        scenarios[8] = "Xmeans_" + String.valueOf((int) (jSpinner3.getValue()));
        scenarios[9] = "RMCBG_" + String.valueOf((int) (jSpinner1.getValue()));
        waitTimer = new Timer();
        scenarioCounter = 0;
        waitTimer.schedule(new TimerTask() {
            @Override
            public void run() {
                if (isBatchRunnerRunning == false) {
                    if (scenarioCounter < scenarios.length) {
                        if (scenarioCounter == 9) {
                            System.out.println("!!! DEBUG!");
                        }
                        int numRegion = -1;
                        if (scenarioCounter > 5) {
                            String[] temp = scenarios[scenarioCounter].split("_");
                            numRegion = Integer.parseInt(temp[1]);
                        }
                        runABatch(scenarios[scenarioCounter], numAgents, numRegion);
                        System.out.println("Started batch run: " + scenarios[scenarioCounter]);
                        scenarioCounter = scenarioCounter + 1;
                    } else {
                        waitTimer.cancel();
                        waitTimer.purge();
                        System.out.println("All runs finished for num agents: " + numAgents);
                        isCompleteBatchRunning = false;
                    }
                }
            }
        }, 0, 1000);
    }

    public void runABatch(String scenario, int numAgents, int numRegions) {
        isBatchRunnerRunning = true;
        myParent.mainModel.isBatchRun = true;
        localBatchCounter = 0;
        myParent.mainModel.batchCounter = 0;
        myParent.mainModel.runs = new ArrayList();
        batchTimer = new Timer();
        batchTimer.schedule(new TimerTask() {
            @Override
            public void run() {
//                System.out.println("UPDATE: "+myParent.mainModel.agentBasedModel.currentTime.toString());
                if (localBatchCounter >= (Integer) jSpinner7.getValue() && myParent.mainModel.isRunning == false) {
                    BatchRun br = new BatchRun();
                    br.runPostProcess(myParent.mainModel.runs, myParent.mainModel);
                    batchTimer.cancel();
                    batchTimer.purge();
                    System.out.println("Finished batch run: " + scenario);
                    isBatchRunnerRunning = false;
                }
                if (myParent.mainModel.isRunning == false) {
                    if (myParent.mainModel.batchCounter < (Integer) jSpinner7.getValue()) {
                        myParent.mainModel.isRunning = true;
                        myParent.mainModel.isBatchRun = true;
                        localBatchCounter = localBatchCounter + 1;
//                        jButton1ActionPerformed(null);
                        init(scenario, numAgents, numRegions);
                        myParent.mainModel.isPause = false;
                        myParent.mainModel.startTimeNanoSecond = System.nanoTime();
                        myParent.mainModel.resume(true, true, myParent.numProcessors, true, false);
                    }
                }
            }
        }, 0, 1000);
    }

    public void init(String scenario, int numAgents, int numRegions) {
        myParent.mainModel.scenario.scenarioName = scenario;

        myParent.mainModel.simulationDelayTime = -1;
        myParent.mainModel.ABM.isReportContactRate = false;
        myParent.mainModel.ABM.isFuzzyStatus = true;
        myParent.mainModel.ABM.isSaveHistoricalRun = false;
//        myParent.mainModel.ABM.isSimpleTransmissionModel = jCheckBox10.isSelected();
//        myParent.mainModel.javaEvaluationEngine.connectToConsole(jTextArea1);
//        myParent.mainModel.pythonEvaluationEngine.connectToConsole(jTextArea2);
        myParent.mainModel.loadAndConnectSupplementaryCaseStudyDataKryo("./datasets/Safegraph/" + myParent.mainModel.ABM.studyScope + "/supplementaryGIS.bin");
//        myParent.mainModel.allGISData.loadScopeCBGPolygons((Scope)(myParent.mainModel.ABM.studyScopeGeography));//THIS IS NOW IN SUPPLAMENTARY DATA

        boolean isSpecialScenarioActive = false;

//        ArrayList<Integer> infectionIndices = new ArrayList();
//        if (isSpecialScenarioActive == false) {
//            if (jRadioButton16.isSelected()) {
//                String[] indices = jTextArea1.getText().split(",");
//                for (int i = 0; i < indices.length; i++) {
//                    infectionIndices.add(Integer.valueOf(indices[i]));
//                }
//            }
//        } else {
//            infectionIndices.add((int) (jSpinner1.getValue()));
//        }
//        int noTessellationNumResidents = (int) (jSpinner4.getValue());
//        if (jCheckBox9.isSelected() == true) {
//            noTessellationNumResidents = -1;
//        }
        int noTessellationNumResidents = -1;//FULL SCALE
        myParent.mainModel.initModelArtificial(true, true, true, numAgents, numRegions, myParent.numProcessors, true, isSpecialScenarioActive, null, noTessellationNumResidents);
//        ClustererManager clustererManager = new ClustererManager();
//        if (jToggleButton2.isSelected()) {
//            ClustererManager.ClustererInfo cf = new ClustererManager.ClustererInfo();
//            cf.clustererName = "xmeans";
//            cf.isClusterRangeSupported = true;
//            cf.maxCluster = (int) (jSpinner6.getValue());
//            cf.minCluster = (int) (jSpinner5.getValue());
//            clustererManager.activeClustererNames.add(cf);
//        }
//        ((RootArtificial) (myParent.mainModel.ABM.root)).clustererManager = clustererManager;
        myParent.mainModel.ABM.agents = new CopyOnWriteArrayList(myParent.mainModel.ABM.agentsRaw);

        System.out.println("###");
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JSpinner jSpinner2;
    private javax.swing.JSpinner jSpinner3;
    private javax.swing.JSpinner jSpinner7;
    private javax.swing.JToggleButton jToggleButton1;
    // End of variables declaration//GEN-END:variables
}
