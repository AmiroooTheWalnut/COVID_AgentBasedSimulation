/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package COVID_AgentBasedSimulation.GUI;

import COVID_AgentBasedSimulation.Model.Data.Safegraph.ParallelPatternParser;
import COVID_AgentBasedSimulation.Model.Data.Safegraph.PatternsRecordProcessed;
import de.siegmar.fastcsv.reader.CsvContainer;
import esmaieeli.gisFastLocationOptimization.GIS3D.Grid;
import esmaieeli.gisFastLocationOptimization.GIS3D.LayerDefinition;
import esmaieeli.gisFastLocationOptimization.GIS3D.LocationNode;
import esmaieeli.gisFastLocationOptimization.GUI.MainFramePanel;
import esmaieeli.gisFastLocationOptimization.Simulation.FacilityLocation;
import esmaieeli.utilities.taskThreading.ParallelProcessor;
import java.awt.Color;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.concurrent.Callable;
import org.locationtech.jts.geom.Coordinate;
import org.locationtech.jts.geom.GeometryFactory;
import org.locationtech.jts.geom.Point;

/**
 *
 * @author Amir Mohammad Esmaieeli Sikaroudi
 */
public class GISLocationDialog extends javax.swing.JDialog {

    MainFrame myParent;

    MainFramePanel mainFParent;

    FacilityLocation[] shopFacilities;
    FacilityLocation[] schoolFacilities;

    /**
     * Creates new form GISLocationDialog
     */
    public GISLocationDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);

        myParent = (MainFrame) parent;

        initComponents();
        mainFParent = new esmaieeli.gisFastLocationOptimization.GUI.MainFramePanel();
        jPanel1.add(mainFParent);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setLayout(new javax.swing.BoxLayout(jPanel1, javax.swing.BoxLayout.LINE_AXIS));

        jButton1.setText("Generate shops voronoi");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Show shops");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Show schools");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Load months");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Generate voronoi combinations");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setText("Generate schools voronoi");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setText("Generate shops");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton8.setText("Generate schools");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jButton9.setText("Show shops and schools");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jButton10.setText("Generate CBG layer");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jButton4)
                    .addComponent(jButton3)
                    .addComponent(jButton6)
                    .addComponent(jButton7)
                    .addComponent(jButton5)
                    .addComponent(jButton8)
                    .addComponent(jButton9)
                    .addComponent(jButton10))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton4)
                .addGap(18, 18, 18)
                .addComponent(jButton7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2)
                .addGap(18, 18, 18)
                .addComponent(jButton8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton3)
                .addGap(18, 18, 18)
                .addComponent(jButton5)
                .addGap(18, 18, 18)
                .addComponent(jButton9)
                .addGap(18, 18, 18)
                .addComponent(jButton10)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 1158, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 729, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        shopFacilities = initShopFacilities();
//        parentApp.enqueue(new Callable() {
//            public Object call() throws Exception {
//                myParent.preProcessor.setWaysColorLayerBased(myParent.allData, resetLayerList.getSelectedIndex());
//                myParent.preProcessor.shadeColors(myParent.allData);
//                parentApp.isRefreshing = true;
//                return null;
//            }
//        });

//        if (resetLayerList.getSelectedIndex() == 0) {
        mainFParent.flowControl.simulateOneLayerCompetingFacilityBased(shopFacilities, mainFParent.findLayer("traffic"), myParent.numProcessors, -1, false);
//        } else {
//            myParent.flowControl.simulateOneLayerCompetingFacilityBased(testFacilities, myParent.findLayer("traffic"), (int) numCPUSpinner.getValue(), resetLayerList.getSelectedIndex() - 1, isIterative.isSelected());
//        }
//        isLavaBased = false;
//        isFacilityBased = true;
//        isZoneActive = false;

        mainFParent.flowControl.correctFacilityLava(mainFParent.findLayer("traffic"), myParent.numProcessors);

        LayerDefinition tempLayer = new LayerDefinition("category", "shops_v");
        int numShops = shopFacilities.length;
        tempLayer.categories = new String[numShops + 1];
        tempLayer.colors = new Color[numShops + 1];
        tempLayer.values = new double[numShops + 1];

        tempLayer.categories[0] = "NOT ASSIGNED";
        tempLayer.colors[0] = new Color(2, 2, 2);
        tempLayer.values[0] = Double.valueOf(0);
        for (int i = 1; i < numShops + 1; i++) {
            tempLayer.categories[i] = "Shop " + String.valueOf(i);
            tempLayer.colors[i] = new Color(Color.HSBtoRGB((float) i / (float) numShops + 1 - 1, 1, 1));
            tempLayer.values[i] = Double.valueOf(i);
        }

        for (int i = 0; i < mainFParent.allData.all_Nodes.length; i++) {
            short[] val = new short[1];
            if (mainFParent.allData.all_Nodes[i].isBurned == true) {
                for (int k = 0; k < mainFParent.allData.all_Nodes[i].burntBy.length; k++) {
                    for (int j = 0; j < shopFacilities.length; j++) {
                        if (mainFParent.allData.all_Nodes[i].burntBy[k] == shopFacilities[j]) {
                            val[0] = (short) (j + 1 + 1);
                        }
                    }
                }
                mainFParent.allData.all_Nodes[i].layers.add(val);
            } else {
                val[0] = 1;
                mainFParent.allData.all_Nodes[i].layers.add(val);
            }
        }

        for (int i = 0; i < mainFParent.allData.all_Nodes.length; i++) {
            if (((short[]) mainFParent.allData.all_Nodes[i].layers.get(mainFParent.allData.all_Nodes[i].layers.size() - 1))[0] < 1) {
                ((short[]) mainFParent.allData.all_Nodes[i].layers.get(mainFParent.allData.all_Nodes[i].layers.size() - 1))[0] = 1;
            }
        }

        mainFParent.allData.all_Layers.add(tempLayer);
        mainFParent.refreshLayersList();

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        String years[] = new String[1];
        years[0] = "2020";
        String months[][] = new String[1][3];
        months[0][0] = "09";
        months[0][1] = "10";
        months[0][2] = "11";
        myParent.mainModel.safegraph.requestDatasetRange(myParent.mainModel.allGISData, myParent.mainModel.ABM.studyScope, years, months, true, myParent.numProcessors);
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        (mainFParent.app).enqueue(new Callable() {
            public Object call() throws Exception {
                if (shopFacilities != null) {
                    mainFParent.app.removeAllHeadquarters();
                    for (int i = 0; i < shopFacilities.length; i++) {
                        mainFParent.app.headquarter(shopFacilities[i].renderingLocation, 0.4f, "center");
                    }
                }
                return null;
            }
        });
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        schoolFacilities = initSchoolFacilities();

        mainFParent.flowControl.simulateOneLayerCompetingFacilityBased(schoolFacilities, mainFParent.findLayer("traffic"), myParent.numProcessors, -1, false);

        mainFParent.flowControl.correctFacilityLava(mainFParent.findLayer("traffic"), myParent.numProcessors);

        LayerDefinition tempLayer = new LayerDefinition("category", "schools_v");
        int numShops = schoolFacilities.length;
        tempLayer.categories = new String[numShops + 1];
        tempLayer.colors = new Color[numShops + 1];
        tempLayer.values = new double[numShops + 1];

        tempLayer.categories[0] = "NOT ASSIGNED";
        tempLayer.colors[0] = new Color(2, 2, 2);
        tempLayer.values[0] = Double.valueOf(0);
        for (int i = 1; i < numShops + 1; i++) {
            tempLayer.categories[i] = "School " + String.valueOf(i);
            tempLayer.colors[i] = new Color(Color.HSBtoRGB((float) i / (float) numShops + 1 - 1, 1, 1));
            tempLayer.values[i] = Double.valueOf(i);
        }

        for (int i = 0; i < mainFParent.allData.all_Nodes.length; i++) {
            short[] val = new short[1];
            if (mainFParent.allData.all_Nodes[i].isBurned == true) {
                for (int k = 0; k < mainFParent.allData.all_Nodes[i].burntBy.length; k++) {
                    for (int j = 0; j < schoolFacilities.length; j++) {
                        if (mainFParent.allData.all_Nodes[i].burntBy[k] == schoolFacilities[j]) {
                            val[0] = (short) (j + 1 + 1);
                        }
                    }
                }
                mainFParent.allData.all_Nodes[i].layers.add(val);
            } else {
                val[0] = 1;
                mainFParent.allData.all_Nodes[i].layers.add(val);
            }
        }

        for (int i = 0; i < mainFParent.allData.all_Nodes.length; i++) {
            if (((short[]) mainFParent.allData.all_Nodes[i].layers.get(mainFParent.allData.all_Nodes[i].layers.size() - 1))[0] < 1) {
                ((short[]) mainFParent.allData.all_Nodes[i].layers.get(mainFParent.allData.all_Nodes[i].layers.size() - 1))[0] = 1;
            }
        }

        mainFParent.allData.all_Layers.add(tempLayer);
        mainFParent.refreshLayersList();
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        (mainFParent.app).enqueue(new Callable() {
            public Object call() throws Exception {
                if (schoolFacilities != null) {
                    mainFParent.app.removeAllHeadquarters();
                    for (int i = 0; i < schoolFacilities.length; i++) {
                        mainFParent.app.headquarter(schoolFacilities[i].renderingLocation, 0.4f, "candidate");
                    }
                }
                return null;
            }
        });
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        int shopLayer = mainFParent.findLayer("shops_v");
        int schoolLayer = mainFParent.findLayer("schools_v");
        HashMap<String, String> perms = new HashMap();
        HashMap<String, Integer> usedPerms = new HashMap();
        HashMap<String, Integer> refinedPermsById = new HashMap();
        HashMap<String, Integer> refinedPermsbyUse = new HashMap();
        ArrayList<String> refinedPermsKeys = new ArrayList();
        int counter = 0;
        for (int i = 1; i < ((LayerDefinition) mainFParent.allData.all_Layers.get(shopLayer)).categories.length; i++) {
            for (int j = 1; j < ((LayerDefinition) mainFParent.allData.all_Layers.get(schoolLayer)).categories.length; j++) {
                perms.put(i + "_" + j, String.valueOf(counter));
                usedPerms.put(i + "_" + j, 0);
                counter = counter + 1;
            }
        }
        usedPerms.put("0", 0);

        for (int i = 0; i < mainFParent.allData.all_Nodes.length; i++) {
            short shopIndex = (short) (((short[]) mainFParent.allData.all_Nodes[i].layers.get(shopLayer))[0] - 1);
            short schoolIndex = (short) (((short[]) mainFParent.allData.all_Nodes[i].layers.get(schoolLayer))[0] - 1);
            int currentCounter = -1;
            if (shopIndex == 0 || schoolIndex == 0) {//NOT ASSIGNED SCENARIOS
                currentCounter = usedPerms.get("0");
            } else {
                currentCounter = usedPerms.get(shopIndex + "_" + schoolIndex);
            }

            usedPerms.put(shopIndex + "_" + schoolIndex, currentCounter + 1);
        }

        counter = 1;
        int refinedCounter = 0;
        for (Map.Entry<String, Integer> entry : usedPerms.entrySet()) {
            String key = entry.getKey();
            Integer value = entry.getValue();
            if (value > 0) {
                refinedPermsbyUse.put(key, value);
                refinedPermsById.put(key, refinedCounter + 1);
                refinedCounter = refinedCounter + 1;
            }
            counter = counter + 1;
        }

        LayerDefinition tempLayer = new LayerDefinition("category", "voronoi_combination_v");
        tempLayer.categories = new String[refinedCounter + 1];
        tempLayer.colors = new Color[refinedCounter + 1];
        tempLayer.values = new double[refinedCounter + 1];

        tempLayer.categories[0] = "NOT ASSIGNED";
        tempLayer.colors[0] = new Color(2, 2, 2);
        tempLayer.values[0] = Double.valueOf(1);
//        for (int i = 1; i < counter + 1; i++) {
//            tempLayer.categories[i] = "combination " + String.valueOf(i);
//            tempLayer.colors[i] = new Color(Color.HSBtoRGB((float) i / (float) counter + 1 - 1, 1, 1));
//            tempLayer.values[i] = Double.valueOf(i + 1);
//        }

        int combinationCounter = 1;
        for (Map.Entry<String, Integer> entry : refinedPermsById.entrySet()) {
            String key = entry.getKey();
            Integer value = entry.getValue();
            tempLayer.categories[combinationCounter] = "combination " + key;
            tempLayer.colors[combinationCounter] = new Color(Color.HSBtoRGB((float) combinationCounter / (float) refinedCounter + 1 - 1, 1, 1));
            tempLayer.values[combinationCounter] = Double.valueOf(value);
            combinationCounter = combinationCounter + 1;
        }

        for (int i = 0; i < mainFParent.allData.all_Nodes.length; i++) {
            short shopIndex = (short) (((short[]) mainFParent.allData.all_Nodes[i].layers.get(shopLayer))[0] - 1);
            short schoolIndex = (short) (((short[]) mainFParent.allData.all_Nodes[i].layers.get(schoolLayer))[0] - 1);
            String combinationIndex;
            if (shopIndex == 0 || schoolIndex == 0) {//NOT ASSIGNED SCENARIOS
                combinationIndex = "0";
            } else {
                combinationIndex = String.valueOf(refinedPermsById.get(shopIndex + "_" + schoolIndex));
            }
            short[] val = new short[1];
//            if(combinationIndex==null){
//                System.out.println("combinationIndex: "+combinationIndex);
//            }
            val[0] = (short) (Short.valueOf(combinationIndex) + 1);
//            if (val[0] == 0) {
//                System.out.println("!!!");
//            }
//            if (val[0] > 64) {
//                System.out.println("!!!");
//            }
            mainFParent.allData.all_Nodes[i].layers.add(val);
        }

        mainFParent.allData.all_Layers.add(tempLayer);
        mainFParent.refreshLayersList();
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        shopFacilities = initShopFacilities();
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        schoolFacilities = initSchoolFacilities();
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        (mainFParent.app).enqueue(new Callable() {
            public Object call() throws Exception {
                mainFParent.app.removeAllHeadquarters();
                if (shopFacilities != null) {
//                    mainFParent.app.removeAllHeadquarters();
                    for (int i = 0; i < shopFacilities.length; i++) {
                        mainFParent.app.headquarter(shopFacilities[i].renderingLocation, 0.4f, "center");
                    }
                }
                if (schoolFacilities != null) {
//                    mainFParent.app.removeAllHeadquarters();
                    for (int i = 0; i < schoolFacilities.length; i++) {
                        mainFParent.app.headquarter(schoolFacilities[i].renderingLocation, 0.4f, "candidate");
                    }
                }
                return null;
            }
        });
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        myParent.mainModel.allGISData.readCensusBlockGrioupPolygon("./datasets");

        System.out.println("num nodes: " + mainFParent.allData.all_Nodes.length);

        Long cBGForNodes[] = new Long[mainFParent.allData.all_Nodes.length];

        int numProcessors = myParent.mainModel.numCPUs;
        if (numProcessors > Runtime.getRuntime().availableProcessors()) {
            numProcessors = Runtime.getRuntime().availableProcessors();
        }
        ParallelLocationNodeCBGIdConnector parallelLocationNodeCBGIdConnector[] = new ParallelLocationNodeCBGIdConnector[numProcessors];

        for (int i = 0; i < numProcessors - 1; i++) {
            parallelLocationNodeCBGIdConnector[i] = new ParallelLocationNodeCBGIdConnector(i, this, cBGForNodes, (int) Math.floor(i * ((mainFParent.allData.all_Nodes.length) / numProcessors)), (int) Math.floor((i + 1) * ((mainFParent.allData.all_Nodes.length) / numProcessors)));
        }
        parallelLocationNodeCBGIdConnector[numProcessors - 1] = new ParallelLocationNodeCBGIdConnector(numProcessors - 1, this, cBGForNodes, (int) Math.floor((numProcessors - 1) * ((mainFParent.allData.all_Nodes.length) / numProcessors)), mainFParent.allData.all_Nodes.length);

        for (int i = 0; i < numProcessors; i++) {
            parallelLocationNodeCBGIdConnector[i].myThread.start();
        }
        for (int i = 0; i < numProcessors; i++) {
            try {
                parallelLocationNodeCBGIdConnector[i].myThread.join();
                System.out.println("thread " + i + "finished for location nodes: " + parallelLocationNodeCBGIdConnector[i].myStartIndex + " | " + parallelLocationNodeCBGIdConnector[i].myEndIndex);
            } catch (InterruptedException ie) {
                System.out.println(ie.toString());
            }
        }

        /*
        for (int u = 0; u < mainFParent.allData.all_Nodes.length; u++) {
            isCBGFound = false;
            for (int i = 0; i < myParent.mainModel.allGISData.countries.size(); i++) {
                for (int j = 0; j < myParent.mainModel.allGISData.countries.get(i).states.size(); j++) {
                    for (int k = 0; k < myParent.mainModel.allGISData.countries.get(i).states.get(j).counties.size(); k++) {
                        for (int m = 0; m < myParent.mainModel.allGISData.countries.get(i).states.get(j).counties.get(k).censusTracts.size(); m++) {
                            for (int v = 0; v < myParent.mainModel.allGISData.countries.get(i).states.get(j).counties.get(k).censusTracts.get(m).censusBlocks.size(); v++) {
                                for (int y = 0; y < myParent.mainModel.allGISData.countries.get(i).states.get(j).counties.get(k).censusTracts.get(m).censusBlocks.get(v).shape.size(); y++) {
                                    GeometryFactory geomFactory = new GeometryFactory();
                                    Point point = geomFactory.createPoint(new Coordinate(mainFParent.allData.all_Nodes[u].lon, mainFParent.allData.all_Nodes[u].lat));
                                    if (myParent.mainModel.allGISData.countries.get(i).states.get(j).counties.get(k).censusTracts.get(m).censusBlocks.get(v).shape.get(y).covers(point) == true) {
                                        censusBlockGroupsEncounteredList.add(myParent.mainModel.allGISData.countries.get(i).states.get(j).counties.get(k).censusTracts.get(m).censusBlocks.get(v).id);
                                        cBGForNodes[i] = myParent.mainModel.allGISData.countries.get(i).states.get(j).counties.get(k).censusTracts.get(m).censusBlocks.get(v).id;
                                        isCBGFound = true;
                                        break;
                                    }
                                }
                                if (isCBGFound == true) {
                                    break;
                                }
                            }
                            if (isCBGFound == true) {
                                break;
                            }
                        }
                        if (isCBGFound == true) {
                            break;
                        }
                    }
                    if (isCBGFound == true) {
                        break;
                    }
                }
                if (isCBGFound == true) {
                    break;
                }
            }
            if (isCBGFound == false) {
                System.out.println("SEVERE PROBLEM! LOCATION NODE HAS NOT CBG!");
            }
            System.out.println(counter);
            counter = counter + 1;
        }
         */
//        ArrayList<Long> censusBlockGroupsEncounteredList = new ArrayList();
        List<Long> censusBlockGroupsEncounteredList = Arrays.asList(cBGForNodes);

        LinkedHashSet<Long> censusBlockGroupsEncounteredUniqueSetHS = new LinkedHashSet(censusBlockGroupsEncounteredList);
        ArrayList<Long> censusBlockGroupsEncounteredUniqueList = new ArrayList(censusBlockGroupsEncounteredUniqueSetHS);
        int numCBGs = censusBlockGroupsEncounteredUniqueList.size();
        int indices[] = new int[numCBGs];
        for (int i = 0; i < numCBGs; i++) {
            indices[i] = i + 1;
        }

        for (int u = 0; u < mainFParent.allData.all_Nodes.length; u++) {
            for (int j = 0; j < censusBlockGroupsEncounteredUniqueList.size(); j++) {
                if (cBGForNodes[u].equals(censusBlockGroupsEncounteredUniqueList.get(j)) == true) {
                    short[] val = new short[1];
                    val[0] = (short) (indices[j]);
                    mainFParent.allData.all_Nodes[u].layers.add(val);
                }
            }
        }

        LayerDefinition tempLayer = new LayerDefinition("category", "censusBlockGroups");

        tempLayer.categories = new String[numCBGs];
        tempLayer.colors = new Color[numCBGs];
        tempLayer.values = new double[numCBGs];

        for (int i = 0; i < numCBGs; i++) {
            tempLayer.categories[i] = "CBG " + String.valueOf(i+1);
            tempLayer.colors[i] = new Color(Color.HSBtoRGB((float) i / (float) numCBGs - 1, 1, 1));
            tempLayer.values[i] = Double.valueOf(censusBlockGroupsEncounteredUniqueList.get(i));
        }

        mainFParent.allData.all_Layers.add(tempLayer);
        mainFParent.refreshLayersList();
    }//GEN-LAST:event_jButton10ActionPerformed

    public boolean isShop(int naicsCode) {
        String naicsString = String.valueOf(naicsCode);
        if (naicsString.startsWith("44511") || naicsString.startsWith("44512") || naicsString.startsWith("44711")) {
            return true;
        }
        return false;
    }

    public boolean isSchool(int naicsCode) {
        String naicsString = String.valueOf(naicsCode);
        if (naicsString.startsWith("61")) {
            return true;
        }
        return false;
    }

    public FacilityLocation[] initShopFacilities() {
        ArrayList<LocationNode> shops = new ArrayList();
        for (int i = 0; i < myParent.mainModel.safegraph.allSafegraphPlaces.monthlySafegraphPlacesList.size(); i++) {
            for (int j = 0; j < myParent.mainModel.safegraph.allSafegraphPlaces.monthlySafegraphPlacesList.get(i).placesRecords.size(); j++) {
                if (myParent.mainModel.safegraph.allSafegraphPlaces.monthlySafegraphPlacesList.get(i).placesRecords.get(j).censusBlock != null) {
                    if (isShop(myParent.mainModel.safegraph.allSafegraphPlaces.monthlySafegraphPlacesList.get(i).placesRecords.get(j).naics_code) == true) {
                        LocationNode node = getNearestNode(myParent.mainModel.safegraph.allSafegraphPlaces.monthlySafegraphPlacesList.get(i).placesRecords.get(j).lat, myParent.mainModel.safegraph.allSafegraphPlaces.monthlySafegraphPlacesList.get(i).placesRecords.get(j).lon);
                        if (node != null) {
                            if (isUniqueLocationNode(shops, node)) {
                                shops.add(node);
                            }
                        }
                    }
                }
            }
        }
        shops = mergeFacilities(shops, 0.01f);

        int numFacilities = shops.size();
        FacilityLocation output[] = new FacilityLocation[numFacilities];
        Color colors[] = new Color[numFacilities];
        for (int i = 0; i < numFacilities; i++) {
            colors[i] = new Color(Color.HSBtoRGB((float) i / (float) numFacilities - 1, 1, 1));

        }
        for (int i = 0; i < numFacilities; i++) {
            output[i] = new FacilityLocation(mainFParent, shops.get(i), shops.get(i).myWays[0], 20d);
            output[i].color = colors[i];
            output[i].isDecoyable = true;
            output[i].tollOff = 0.5;//IMP
        }
        System.out.println("shops generated: " + output.length);
        return output;
    }

    public ArrayList<LocationNode> mergeFacilities(ArrayList<LocationNode> input, float threshold) {
        ArrayList<LocationNode> checker = new ArrayList();

//        for (int i = 0; i < input.size(); i++) {
//            checker.add(new LocationNode(input.get(i).id,input.get(i).lat,input.get(i).lon,input.get(i).myOrder));
//        }
        for (int i = 0; i < input.size(); i++) {
            boolean tooClose = false;
            for (int j = 0; j < input.size(); j++) {
                if (i != j) {
                    if (Math.sqrt(Math.pow(input.get(i).lat - input.get(j).lat, 2) + Math.pow(input.get(i).lon - input.get(j).lon, 2)) < threshold) {
                        tooClose = true;
                    } else {

                    }
                }
            }
            if (tooClose == false) {
                checker.add(new LocationNode(input.get(i).id, input.get(i).lat, input.get(i).lon, input.get(i).myOrder));
            }
        }
        ArrayList<LocationNode> output = new ArrayList();

        for (int i = 0; i < checker.size(); i++) {
            output.add(getNearestNode((float) checker.get(i).lat, (float) checker.get(i).lon));
        }
        return output;
    }

    public FacilityLocation[] initSchoolFacilities() {
        ArrayList<LocationNode> schools = new ArrayList();
        for (int i = 0; i < myParent.mainModel.safegraph.allSafegraphPlaces.monthlySafegraphPlacesList.size(); i++) {
            for (int j = 0; j < myParent.mainModel.safegraph.allSafegraphPlaces.monthlySafegraphPlacesList.get(i).placesRecords.size(); j++) {
                if (myParent.mainModel.safegraph.allSafegraphPlaces.monthlySafegraphPlacesList.get(i).placesRecords.get(j).censusBlock != null) {
                    if (isSchool(myParent.mainModel.safegraph.allSafegraphPlaces.monthlySafegraphPlacesList.get(i).placesRecords.get(j).naics_code) == true) {
                        LocationNode node = getNearestNode(myParent.mainModel.safegraph.allSafegraphPlaces.monthlySafegraphPlacesList.get(i).placesRecords.get(j).lat, myParent.mainModel.safegraph.allSafegraphPlaces.monthlySafegraphPlacesList.get(i).placesRecords.get(j).lon);
                        if (node != null) {
                            if (isUniqueLocationNode(schools, node)) {
                                schools.add(node);
                            }
                        }
                    }
                }
            }
        }
        schools = mergeFacilities(schools, 0.007f);

        int numFacilities = schools.size();
        FacilityLocation output[] = new FacilityLocation[numFacilities];
        Color colors[] = new Color[numFacilities];
        for (int i = 0; i < numFacilities; i++) {
            colors[i] = new Color(Color.HSBtoRGB((float) i / (float) numFacilities - 1, 1, 1));

        }
        for (int i = 0; i < numFacilities; i++) {
            output[i] = new FacilityLocation(mainFParent, schools.get(i), schools.get(i).myWays[0], 20d);
            output[i].color = colors[i];
            output[i].isDecoyable = true;
            output[i].tollOff = 0.5;//IMP
        }
        System.out.println("schools generated: " + output.length);
        return output;
    }

    public boolean isUniqueLocationNode(ArrayList<LocationNode> list, LocationNode input) {
        for (int i = 0; i < list.size(); i++) {
            if (list.get(i).lat == input.lat && list.get(i).lon == input.lon) {
                return false;
            }
        }
        return true;
    }

    public LocationNode getNearestNode(float collisionPositionx, float collisionPositiony) {
        boolean isValidCollition = false;
        Grid outputGrid = new Grid(0, 0, 0, 0, 0, 0, "");
        for (int i = 0; i < mainFParent.allData.grid.length; i++) {
            for (int j = 0; j < mainFParent.allData.grid[0].length; j++) {
//                            System.out.println("max x val: "+((myParent.allData.grid[i][j].max_x_val-myParent.allData.myScale.center_x)*myParent.allData.myScale.scale));
//                            System.out.println("min x val: "+((myParent.allData.grid[i][j].min_x_val-myParent.allData.myScale.center_x)*myParent.allData.myScale.scale));
//                            System.out.println("max y val: "+((myParent.allData.grid[i][j].max_y_val-myParent.allData.myScale.center_y)*myParent.allData.myScale.scale));
//                            System.out.println("min y val: "+((myParent.allData.grid[i][j].min_y_val-myParent.allData.myScale.center_y)*myParent.allData.myScale.scale));
//                float max_x = (float) ((mainFParent.allData.grid[i][j].max_x_val - (mainFParent.allData.myScale.center_x + mainFParent.allData.myScale.x_position)) * mainFParent.allData.myScale.scale);
//                float min_x = (float) ((mainFParent.allData.grid[i][j].min_x_val - (mainFParent.allData.myScale.center_x + mainFParent.allData.myScale.x_position)) * mainFParent.allData.myScale.scale);
//                float max_y = (float) ((mainFParent.allData.grid[i][j].max_y_val - (mainFParent.allData.myScale.center_y + mainFParent.allData.myScale.y_position)) * mainFParent.allData.myScale.scale);
//                float min_y = (float) ((mainFParent.allData.grid[i][j].min_y_val - (mainFParent.allData.myScale.center_y + mainFParent.allData.myScale.y_position)) * mainFParent.allData.myScale.scale);
//                            System.out.println("max x: "+max_x);
//                            System.out.println("min x: "+min_x);
//                            System.out.println("max y: "+max_y);
//                            System.out.println("min y: "+min_y);
                if (collisionPositiony < mainFParent.allData.grid[i][j].max_y_val && collisionPositiony > mainFParent.allData.grid[i][j].min_y_val && collisionPositionx < mainFParent.allData.grid[i][j].max_x_val && collisionPositionx > mainFParent.allData.grid[i][j].min_x_val) {
                    if (mainFParent.allData.grid[i][j].myNodes.length > 0) {
                        isValidCollition = true;
//                                System.out.println("grid x: "+i);
//                                System.out.println("grid y: "+j);
                        outputGrid = mainFParent.allData.grid[i][j];
                        break;
                    }
                }
            }
            if (isValidCollition == true) {
                break;
            }
        }
        LocationNode nearestNode = null;
        if (isValidCollition == true) {
            double leastDistance = Double.POSITIVE_INFINITY;
            nearestNode = outputGrid.myNodes[0];
            for (int i = 0; i < outputGrid.myNodes.length; i++) {
                //System.out.println(outputGrid.myNodes[i]);//WARNING, NULL POINTER SPOTTED, A GRID HAS A NULL LOCATIONNODE
                if (outputGrid.myNodes[i] != null) {
                    double dist = Math.sqrt(Math.pow(collisionPositionx - outputGrid.myNodes[i].lat, 2) + Math.pow(collisionPositiony - outputGrid.myNodes[i].lon, 2));
                    if (dist < leastDistance) {
                        nearestNode = outputGrid.myNodes[i];
                        leastDistance = dist;
                    }
                }
            }
        }
        return nearestNode;
    }

    public class ParallelLocationNodeCBGIdConnector extends ParallelProcessor {

        public ArrayList<PatternsRecordProcessed> records;
        GISLocationDialog myParent;
        Long myData[];
        int myThreadIndex;

        public ParallelLocationNodeCBGIdConnector(int threadIndex, GISLocationDialog parent, Long cBGForNodes[], int startIndex, int endIndex) {
            super(parent, cBGForNodes, startIndex, endIndex);
            records = new ArrayList();
            myThreadIndex = threadIndex;
            myParent = parent;
            myData = cBGForNodes;
            myThread = new Thread(new Runnable() {
                @Override
                public void run() {

//                    int counter = 0;
                    boolean isCBGFound = false;
                    for (int u = startIndex; u < endIndex; u++) {
                        isCBGFound = false;
                        for (int i = 0; i < myParent.myParent.mainModel.allGISData.countries.size(); i++) {
                            for (int j = 0; j < myParent.myParent.mainModel.allGISData.countries.get(i).states.size(); j++) {
                                for (int k = 0; k < myParent.myParent.mainModel.allGISData.countries.get(i).states.get(j).counties.size(); k++) {
                                    for (int m = 0; m < myParent.myParent.mainModel.allGISData.countries.get(i).states.get(j).counties.get(k).censusTracts.size(); m++) {
                                        for (int v = 0; v < myParent.myParent.mainModel.allGISData.countries.get(i).states.get(j).counties.get(k).censusTracts.get(m).censusBlocks.size(); v++) {
                                            for (int y = 0; y < myParent.myParent.mainModel.allGISData.countries.get(i).states.get(j).counties.get(k).censusTracts.get(m).censusBlocks.get(v).shape.size(); y++) {
                                                GeometryFactory geomFactory = new GeometryFactory();
                                                Point point = geomFactory.createPoint(new Coordinate(mainFParent.allData.all_Nodes[u].lon, mainFParent.allData.all_Nodes[u].lat));
                                                if (myParent.myParent.mainModel.allGISData.countries.get(i).states.get(j).counties.get(k).censusTracts.get(m).censusBlocks.get(v).shape.get(y).covers(point) == true) {
                                                    //censusBlockGroupsEncounteredList.add(myParent.myParent.mainModel.allGISData.countries.get(i).states.get(j).counties.get(k).censusTracts.get(m).censusBlocks.get(v).id);
                                                    myData[u] = myParent.myParent.mainModel.allGISData.countries.get(i).states.get(j).counties.get(k).censusTracts.get(m).censusBlocks.get(v).id;
                                                    isCBGFound = true;
                                                    break;
                                                }
                                            }
                                            if (isCBGFound == true) {
                                                break;
                                            }
                                        }
                                        if (isCBGFound == true) {
                                            break;
                                        }
                                    }
                                    if (isCBGFound == true) {
                                        break;
                                    }
                                }
                                if (isCBGFound == true) {
                                    break;
                                }
                            }
                            if (isCBGFound == true) {
                                break;
                            }
                        }
                        if (isCBGFound == false) {
                            System.out.println("SEVERE PROBLEM! LOCATION NODE HAS NOT CBG!");
                        }
//                        System.out.println(counter);
//                        counter = counter + 1;
                    }
                }
            });
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    // End of variables declaration//GEN-END:variables
}
