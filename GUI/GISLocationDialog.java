/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package COVID_AgentBasedSimulation.GUI;

import esmaieeli.gisFastLocationOptimization.GIS3D.Grid;
import esmaieeli.gisFastLocationOptimization.GIS3D.LayerDefinition;
import esmaieeli.gisFastLocationOptimization.GIS3D.LocationNode;
import esmaieeli.gisFastLocationOptimization.GUI.MainFramePanel;
import esmaieeli.gisFastLocationOptimization.Simulation.FacilityLocation;
import java.awt.Color;
import java.util.ArrayList;
import java.util.concurrent.Callable;

/**
 *
 * @author user
 */
public class GISLocationDialog extends javax.swing.JDialog {

    MainFrame myParent;

    MainFramePanel mainFParent;

    FacilityLocation[] shopFacilities;

    /**
     * Creates new form GISLocationDialog
     */
    public GISLocationDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);

        myParent = (MainFrame) parent;

        initComponents();
        mainFParent = new esmaieeli.gisFastLocationOptimization.GUI.MainFramePanel();
        jPanel1.add(mainFParent);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jToggleButton1 = new javax.swing.JToggleButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setLayout(new javax.swing.BoxLayout(jPanel1, javax.swing.BoxLayout.LINE_AXIS));

        jButton1.setText("Generate shops voronoi");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Show shops");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jToggleButton1.setText("Generate schools");

        jButton3.setText("Generate schools voronoi");

        jButton4.setText("Load months");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jToggleButton1)
                    .addComponent(jButton4)
                    .addComponent(jButton3))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton4)
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2)
                .addGap(18, 18, 18)
                .addComponent(jToggleButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton3)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 1158, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 729, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        shopFacilities = initFacilities();
//        parentApp.enqueue(new Callable() {
//            public Object call() throws Exception {
//                myParent.preProcessor.setWaysColorLayerBased(myParent.allData, resetLayerList.getSelectedIndex());
//                myParent.preProcessor.shadeColors(myParent.allData);
//                parentApp.isRefreshing = true;
//                return null;
//            }
//        });

//        if (resetLayerList.getSelectedIndex() == 0) {
        mainFParent.flowControl.simulateOneLayerCompetingFacilityBased(shopFacilities, mainFParent.findLayer("traffic"), myParent.numProcessors, -1, false);
//        } else {
//            myParent.flowControl.simulateOneLayerCompetingFacilityBased(testFacilities, myParent.findLayer("traffic"), (int) numCPUSpinner.getValue(), resetLayerList.getSelectedIndex() - 1, isIterative.isSelected());
//        }
//        isLavaBased = false;
//        isFacilityBased = true;
//        isZoneActive = false;

        mainFParent.flowControl.correctFacilityLava(mainFParent.findLayer("traffic"),myParent.numProcessors);

        LayerDefinition tempLayer = new LayerDefinition("category", "shops_v");
        int numShops = shopFacilities.length;
        tempLayer.categories = new String[numShops+1];
        tempLayer.colors = new Color[numShops+1];
        tempLayer.values = new double[numShops+1];

        tempLayer.categories[0] = "NOT ASSIGNED";
        tempLayer.colors[0] = new Color(2, 2, 2);
        tempLayer.values[0] = Double.valueOf(0);
        for (int i = 1; i < numShops+1; i++) {
            tempLayer.categories[i] = "Shop " + String.valueOf(i);
            tempLayer.colors[i] = new Color(Color.HSBtoRGB((float) i / (float) numShops + 1 - 1, 1, 1));
            tempLayer.values[i] = Double.valueOf(i);
        }

        for (int i = 0; i < mainFParent.allData.all_Nodes.length; i++) {
            short[] val = new short[1];
            if (mainFParent.allData.all_Nodes[i].isBurned == true) {
                for (int k = 0; k < mainFParent.allData.all_Nodes[i].burntBy.length; k++) {
                    for (int j = 0; j < shopFacilities.length; j++) {
                        if (mainFParent.allData.all_Nodes[i].burntBy[k] == shopFacilities[j]) {
                            val[0] = (short) (j + 1 + 1);
                        }
                    }
                }
                mainFParent.allData.all_Nodes[i].layers.add(val);
            } else {
                val[0] = 1;
                mainFParent.allData.all_Nodes[i].layers.add(val);
            }
        }
        
        for (int i = 0; i < mainFParent.allData.all_Nodes.length; i++) {
            if(((short[])mainFParent.allData.all_Nodes[i].layers.get(mainFParent.allData.all_Nodes[i].layers.size()-1))[0]<1)
            {
                ((short[])mainFParent.allData.all_Nodes[i].layers.get(mainFParent.allData.all_Nodes[i].layers.size()-1))[0]=1;
                System.out.println("I'm FFFFed up!");
            }
        }

        mainFParent.allData.all_Layers.add(tempLayer);
        mainFParent.refreshLayersList();

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        String years[] = new String[1];
        years[0] = "2020";
        String months[][] = new String[1][3];
        months[0][0] = "09";
        months[0][1] = "10";
        months[0][2] = "11";
        myParent.mainModel.safegraph.requestDatasetRange(myParent.mainModel.allGISData, myParent.mainModel.ABM.studyScope, years, months, true, myParent.numProcessors);
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        (mainFParent.app).enqueue(new Callable() {
            public Object call() throws Exception {
                if (shopFacilities != null) {
                    mainFParent.app.removeAllHeadquarters();
                    for (int i = 0; i < shopFacilities.length; i++) {
                        mainFParent.app.headquarter(shopFacilities[i].renderingLocation, shopFacilities[i].capacity, "center");
                    }
                }
                return null;
            }
        });
    }//GEN-LAST:event_jButton2ActionPerformed

    public boolean isShop(int naicsCode) {
        String naicsString = String.valueOf(naicsCode);
        if (naicsString.contains("44511") || naicsString.contains("44512") || naicsString.contains("44711")) {
            return true;
        }
        return false;
    }

    public FacilityLocation[] initFacilities() {
        ArrayList<LocationNode> shops = new ArrayList();
        for (int i = 0; i < myParent.mainModel.safegraph.allSafegraphPlaces.monthlySafegraphPlacesList.size(); i++) {
            for (int j = 0; j < myParent.mainModel.safegraph.allSafegraphPlaces.monthlySafegraphPlacesList.get(i).placesRecords.size(); j++) {
                if (myParent.mainModel.safegraph.allSafegraphPlaces.monthlySafegraphPlacesList.get(i).placesRecords.get(j).censusBlock != null) {
                    if (isShop(myParent.mainModel.safegraph.allSafegraphPlaces.monthlySafegraphPlacesList.get(i).placesRecords.get(j).naics_code) == true) {
                        LocationNode node = getNearestNode(myParent.mainModel.safegraph.allSafegraphPlaces.monthlySafegraphPlacesList.get(i).placesRecords.get(j).censusBlock.lat, myParent.mainModel.safegraph.allSafegraphPlaces.monthlySafegraphPlacesList.get(i).placesRecords.get(j).censusBlock.lon);
                        if(isUniqueLocationNode(shops,node)){
                            shops.add(node);
                        }
                    }
                }
            }
        }

        int numFacilities = shops.size();
        FacilityLocation output[] = new FacilityLocation[numFacilities];
        Color colors[] = new Color[numFacilities];
        for (int i = 0; i < numFacilities; i++) {
            colors[i] = new Color(Color.HSBtoRGB((float) i / (float) numFacilities - 1, 1, 1));

        }
        for (int i = 0; i < numFacilities; i++) {
//            int way_init = (int) (Math.round(Math.random() * (mainFParent.allData.all_Ways.length - 1)));
//            int node_init = (int) (Math.round(Math.random() * (mainFParent.allData.all_Ways[way_init].myNodes.length - 1)));
//            do {
//                way_init = (int) (Math.round(Math.random() * (mainFParent.allData.all_Ways.length - 1)));
//                node_init = (int) (Math.round(Math.random() * (mainFParent.allData.all_Ways[way_init].myNodes.length - 1)));
//            } while (mainFParent.allData.all_Ways[way_init].type == null);
            output[i] = new FacilityLocation(mainFParent, shops.get(i), shops.get(i).myWays[0], 20d);
            output[i].color = colors[i];
            output[i].isDecoyable = true;
        }
//        System.out.println(output[0].nodeLocation.id);
        return output;
    }
    
    public boolean isUniqueLocationNode(ArrayList<LocationNode> list, LocationNode input){
        for(int i=0;i<list.size();i++){
            if(list.get(i).lat==input.lat && list.get(i).lon==input.lon){
                return false;
            }
        }
        return true;
    }

    public LocationNode getNearestNode(float collisionPositionx, float collisionPositiony) {
        boolean isValidCollition = false;
        Grid outputGrid = new Grid(0, 0, 0, 0, 0, 0, "");
        for (int i = 0; i < mainFParent.allData.grid.length; i++) {
            for (int j = 0; j < mainFParent.allData.grid[0].length; j++) {
//                            System.out.println("max x val: "+((myParent.allData.grid[i][j].max_x_val-myParent.allData.myScale.center_x)*myParent.allData.myScale.scale));
//                            System.out.println("min x val: "+((myParent.allData.grid[i][j].min_x_val-myParent.allData.myScale.center_x)*myParent.allData.myScale.scale));
//                            System.out.println("max y val: "+((myParent.allData.grid[i][j].max_y_val-myParent.allData.myScale.center_y)*myParent.allData.myScale.scale));
//                            System.out.println("min y val: "+((myParent.allData.grid[i][j].min_y_val-myParent.allData.myScale.center_y)*myParent.allData.myScale.scale));
//                float max_x = (float) ((mainFParent.allData.grid[i][j].max_x_val - (mainFParent.allData.myScale.center_x + mainFParent.allData.myScale.x_position)) * mainFParent.allData.myScale.scale);
//                float min_x = (float) ((mainFParent.allData.grid[i][j].min_x_val - (mainFParent.allData.myScale.center_x + mainFParent.allData.myScale.x_position)) * mainFParent.allData.myScale.scale);
//                float max_y = (float) ((mainFParent.allData.grid[i][j].max_y_val - (mainFParent.allData.myScale.center_y + mainFParent.allData.myScale.y_position)) * mainFParent.allData.myScale.scale);
//                float min_y = (float) ((mainFParent.allData.grid[i][j].min_y_val - (mainFParent.allData.myScale.center_y + mainFParent.allData.myScale.y_position)) * mainFParent.allData.myScale.scale);
//                            System.out.println("max x: "+max_x);
//                            System.out.println("min x: "+min_x);
//                            System.out.println("max y: "+max_y);
//                            System.out.println("min y: "+min_y);
                if (collisionPositionx < mainFParent.allData.grid[i][j].max_y_val && collisionPositionx > mainFParent.allData.grid[i][j].min_y_val && collisionPositiony < mainFParent.allData.grid[i][j].max_x_val && collisionPositiony > mainFParent.allData.grid[i][j].min_x_val) {
                    isValidCollition = true;
//                                System.out.println("grid x: "+i);
//                                System.out.println("grid y: "+j);
                    outputGrid = mainFParent.allData.grid[i][j];
                    break;
                }
            }
            if (isValidCollition == true) {
                break;
            }
        }
        LocationNode nearestNode = null;
        if (isValidCollition == true) {
            double leastDistance = Double.POSITIVE_INFINITY;
            nearestNode = outputGrid.myNodes[0];
            for (int i = 0; i < outputGrid.myNodes.length; i++) {
                //System.out.println(outputGrid.myNodes[i]);//WARNING, NULL POINTER SPOTTED, A GRID HAS A NULL LOCATIONNODE
                if (outputGrid.myNodes[i] != null) {
                    double dist = Math.sqrt(Math.pow(collisionPositionx - outputGrid.myNodes[i].lat, 2) + Math.pow(collisionPositiony - outputGrid.myNodes[i].lon, 2));
                    if (dist < leastDistance) {
                        nearestNode = outputGrid.myNodes[i];
                        leastDistance = dist;
                    }
                }
            }
        }
        return nearestNode;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JToggleButton jToggleButton1;
    // End of variables declaration//GEN-END:variables
}
