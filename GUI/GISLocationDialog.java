/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package COVID_AgentBasedSimulation.GUI;

import COVID_AgentBasedSimulation.Model.Data.Safegraph.LocationNodeSafegraph;
import COVID_AgentBasedSimulation.Model.Data.Safegraph.PatternsRecordProcessed;
import COVID_AgentBasedSimulation.Model.Structure.CensusBlockGroup;
import COVID_AgentBasedSimulation.Model.Structure.Marker;
import esmaieeli.gisFastLocationOptimization.GIS3D.Grid;
import esmaieeli.gisFastLocationOptimization.GIS3D.LayerDefinition;
import esmaieeli.gisFastLocationOptimization.GIS3D.LocationNode;
import esmaieeli.gisFastLocationOptimization.GUI.MainFramePanel;
import esmaieeli.gisFastLocationOptimization.Simulation.FacilityLocation;
import esmaieeli.gisFastLocationOptimization.Simulation.Routing;
import esmaieeli.utilities.taskThreading.ParallelProcessor;
import java.awt.Color;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.concurrent.Callable;
import org.locationtech.jts.geom.Coordinate;
import org.locationtech.jts.geom.GeometryFactory;
import org.locationtech.jts.geom.Point;
import de.fhpotsdam.unfolding.geo.Location;
import org.locationtech.jts.algorithm.ConvexHull;

/**
 *
 * @author Amir Mohammad Esmaieeli Sikaroudi
 */
public class GISLocationDialog extends javax.swing.JDialog {

    MainFrame myParent;

    MainFramePanel mainFParent;
    COVIDGeoVisualization renderer;

    FacilityLocation[] shopFacilities;
    FacilityLocation[] schoolFacilities;

    float shopMergeThreshold = 0.0129f;
    float templeMergeThreshold = 0.012f;

    COVIDGeoVisualization sketch;

    /**
     * Creates new form GISLocationDialog
     */
    public GISLocationDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);

        myParent = (MainFrame) parent;

        initComponents();
        mainFParent = new esmaieeli.gisFastLocationOptimization.GUI.MainFramePanel();
        jPanel1.add(mainFParent);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        jButton11 = new javax.swing.JButton();
        jButton12 = new javax.swing.JButton();
        jButton13 = new javax.swing.JButton();
        jButton14 = new javax.swing.JButton();
        jButton15 = new javax.swing.JButton();
        jButton16 = new javax.swing.JButton();
        jButton17 = new javax.swing.JButton();
        jButton18 = new javax.swing.JButton();
        jButton19 = new javax.swing.JButton();
        jButton20 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setLayout(new javax.swing.BoxLayout(jPanel1, javax.swing.BoxLayout.LINE_AXIS));

        jPanel2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jButton1.setText("Generate shops voronoi");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Show shops");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Show schools");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Load months");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Generate voronoi combinations");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setText("Generate schools voronoi");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setText("Generate shops");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton8.setText("Generate schools");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jButton9.setText("Show shops and schools");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jButton10.setText("Generate CBG layer");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        jButton11.setText("Food & grocery 1,2,3 nearest home");
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });

        jButton12.setText("School 1,2,3 nearest");
        jButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton12ActionPerformed(evt);
            }
        });

        jButton13.setText("Religious 1,2,3 nearest");
        jButton13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton13ActionPerformed(evt);
            }
        });

        jButton14.setText("Food & grocery 1,2,3 nearest work");
        jButton14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton14ActionPerformed(evt);
            }
        });

        jButton15.setText("Generate VDs CBGs");
        jButton15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton15ActionPerformed(evt);
            }
        });

        jButton16.setText("Misc: Draw CBGs of infected");
        jButton16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton16ActionPerformed(evt);
            }
        });

        jButton17.setText("Misc: Draw VDs of infected");

        jButton18.setText("Misc: Draw CBGs_VDs of infected");

        jButton19.setText("Pan zoom to CaseStudy");
        jButton19.setToolTipText("");
        jButton19.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton19ActionPerformed(evt);
            }
        });

        jButton20.setText("Show map");
        jButton20.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton20ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jButton4)
                    .addComponent(jButton3)
                    .addComponent(jButton6)
                    .addComponent(jButton7)
                    .addComponent(jButton5)
                    .addComponent(jButton8)
                    .addComponent(jButton9)
                    .addComponent(jButton10)
                    .addComponent(jButton11)
                    .addComponent(jButton12)
                    .addComponent(jButton13)
                    .addComponent(jButton14)
                    .addComponent(jButton15)
                    .addComponent(jButton16)
                    .addComponent(jButton17)
                    .addComponent(jButton18)
                    .addComponent(jButton19)
                    .addComponent(jButton20))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton4)
                .addGap(18, 18, 18)
                .addComponent(jButton7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2)
                .addGap(18, 18, 18)
                .addComponent(jButton8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton3)
                .addGap(18, 18, 18)
                .addComponent(jButton5)
                .addGap(18, 18, 18)
                .addComponent(jButton9)
                .addGap(18, 18, 18)
                .addComponent(jButton10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton15)
                .addGap(18, 18, 18)
                .addComponent(jButton11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton13)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton14)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton20)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton16)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton18)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton17)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton19)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 1160, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 691, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        shopFacilities = initShopFacilities();
//        parentApp.enqueue(new Callable() {
//            public Object call() throws Exception {
//                myParent.preProcessor.setWaysColorLayerBased(myParent.allData, resetLayerList.getSelectedIndex());
//                myParent.preProcessor.shadeColors(myParent.allData);
//                parentApp.isRefreshing = true;
//                return null;
//            }
//        });

//        if (resetLayerList.getSelectedIndex() == 0) {
        mainFParent.flowControl.simulateOneLayerCompetingFacilityBased(shopFacilities, mainFParent.findLayer("traffic"), myParent.numProcessors, -1, false);
//        } else {
//            myParent.flowControl.simulateOneLayerCompetingFacilityBased(testFacilities, myParent.findLayer("traffic"), (int) numCPUSpinner.getValue(), resetLayerList.getSelectedIndex() - 1, isIterative.isSelected());
//        }
//        isLavaBased = false;
//        isFacilityBased = true;
//        isZoneActive = false;

        mainFParent.flowControl.correctFacilityLava(mainFParent.findLayer("traffic"), myParent.numProcessors);

        LayerDefinition tempLayer = new LayerDefinition("category", "shops_v");
        int numShops = shopFacilities.length;
        tempLayer.categories = new String[numShops + 1];
        tempLayer.colors = new Color[numShops + 1];
        tempLayer.values = new double[numShops + 1];

        tempLayer.categories[0] = "NOT ASSIGNED";
        tempLayer.colors[0] = new Color(2, 2, 2);
        tempLayer.values[0] = Double.valueOf(0);
        for (int i = 1; i < numShops + 1; i++) {
            tempLayer.categories[i] = "Shop " + String.valueOf(i);
            tempLayer.colors[i] = new Color(Color.HSBtoRGB((float) i / (float) numShops + 1 - 1, 1, 1));
            tempLayer.values[i] = Double.valueOf(i);
        }

        for (int i = 0; i < mainFParent.allData.all_Nodes.length; i++) {
            short[] val = new short[1];
            if (mainFParent.allData.all_Nodes[i].isBurned == true) {
                for (int k = 0; k < mainFParent.allData.all_Nodes[i].burntBy.length; k++) {
                    for (int j = 0; j < shopFacilities.length; j++) {
                        if (mainFParent.allData.all_Nodes[i].burntBy[k] == shopFacilities[j]) {
                            val[0] = (short) (j + 1 + 1);
                        }
                    }
                }
                mainFParent.allData.all_Nodes[i].layers.add(val);
            } else {
                val[0] = 1;
                mainFParent.allData.all_Nodes[i].layers.add(val);
            }
        }

        for (int i = 0; i < mainFParent.allData.all_Nodes.length; i++) {
            if (((short[]) mainFParent.allData.all_Nodes[i].layers.get(mainFParent.allData.all_Nodes[i].layers.size() - 1))[0] < 1) {
                ((short[]) mainFParent.allData.all_Nodes[i].layers.get(mainFParent.allData.all_Nodes[i].layers.size() - 1))[0] = 1;
            }
        }

        mainFParent.allData.all_Layers.add(tempLayer);
        mainFParent.refreshLayersList();

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        String years[] = new String[1];
        years[0] = "2020";
        String months[][] = new String[1][3];
        months[0][0] = "09";
        months[0][1] = "10";
        months[0][2] = "11";
        myParent.mainModel.safegraph.requestDatasetRange(myParent.mainModel.allGISData, myParent.mainModel.ABM.studyScope, years, months, true, myParent.numProcessors);
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        (mainFParent.app).enqueue(new Callable() {
            public Object call() throws Exception {
                if (shopFacilities != null) {
                    mainFParent.app.removeAllHeadquarters();
                    for (int i = 0; i < shopFacilities.length; i++) {
                        mainFParent.app.headquarter(shopFacilities[i].renderingLocation, 0.4f, "center");
                    }
                }
                return null;
            }
        });
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        schoolFacilities = initSchoolFacilities();

        mainFParent.flowControl.simulateOneLayerCompetingFacilityBased(schoolFacilities, mainFParent.findLayer("traffic"), myParent.numProcessors, -1, false);

        mainFParent.flowControl.correctFacilityLava(mainFParent.findLayer("traffic"), myParent.numProcessors);

        LayerDefinition tempLayer = new LayerDefinition("category", "schools_v");
        int numShops = schoolFacilities.length;
        tempLayer.categories = new String[numShops + 1];
        tempLayer.colors = new Color[numShops + 1];
        tempLayer.values = new double[numShops + 1];

        tempLayer.categories[0] = "NOT ASSIGNED";
        tempLayer.colors[0] = new Color(2, 2, 2);
        tempLayer.values[0] = Double.valueOf(0);
        for (int i = 1; i < numShops + 1; i++) {
            tempLayer.categories[i] = "School " + String.valueOf(i);
            tempLayer.colors[i] = new Color(Color.HSBtoRGB((float) i / (float) numShops + 1 - 1, 1, 1));
            tempLayer.values[i] = Double.valueOf(i);
        }

        for (int i = 0; i < mainFParent.allData.all_Nodes.length; i++) {
            short[] val = new short[1];
            if (mainFParent.allData.all_Nodes[i].isBurned == true) {
                for (int k = 0; k < mainFParent.allData.all_Nodes[i].burntBy.length; k++) {
                    for (int j = 0; j < schoolFacilities.length; j++) {
                        if (mainFParent.allData.all_Nodes[i].burntBy[k] == schoolFacilities[j]) {
                            val[0] = (short) (j + 1 + 1);
                        }
                    }
                }
                mainFParent.allData.all_Nodes[i].layers.add(val);
            } else {
                val[0] = 1;
                mainFParent.allData.all_Nodes[i].layers.add(val);
            }
        }

        for (int i = 0; i < mainFParent.allData.all_Nodes.length; i++) {
            if (((short[]) mainFParent.allData.all_Nodes[i].layers.get(mainFParent.allData.all_Nodes[i].layers.size() - 1))[0] < 1) {
                ((short[]) mainFParent.allData.all_Nodes[i].layers.get(mainFParent.allData.all_Nodes[i].layers.size() - 1))[0] = 1;
            }
        }

        mainFParent.allData.all_Layers.add(tempLayer);
        mainFParent.refreshLayersList();
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        (mainFParent.app).enqueue(new Callable() {
            public Object call() throws Exception {
                if (schoolFacilities != null) {
                    mainFParent.app.removeAllHeadquarters();
                    for (int i = 0; i < schoolFacilities.length; i++) {
                        mainFParent.app.headquarter(schoolFacilities[i].renderingLocation, 0.4f, "candidate");
                    }
                }
                return null;
            }
        });
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        int shopLayer = mainFParent.findLayer("shops_v");
        int schoolLayer = mainFParent.findLayer("schools_v");
        HashMap<String, String> perms = new HashMap();
        HashMap<String, Integer> usedPerms = new HashMap();
        HashMap<String, Integer> refinedPermsById = new HashMap();
        HashMap<String, Integer> refinedPermsbyUse = new HashMap();
        ArrayList<String> refinedPermsKeys = new ArrayList();
        int counter = 0;
        for (int i = 1; i < ((LayerDefinition) mainFParent.allData.all_Layers.get(shopLayer)).categories.length; i++) {
            for (int j = 1; j < ((LayerDefinition) mainFParent.allData.all_Layers.get(schoolLayer)).categories.length; j++) {
                perms.put(i + "_" + j, String.valueOf(counter));
                usedPerms.put(i + "_" + j, 0);
                counter = counter + 1;
            }
        }
        usedPerms.put("0", 0);

        for (int i = 0; i < mainFParent.allData.all_Nodes.length; i++) {
            short shopIndex = (short) (((short[]) mainFParent.allData.all_Nodes[i].layers.get(shopLayer))[0] - 1);
            short schoolIndex = (short) (((short[]) mainFParent.allData.all_Nodes[i].layers.get(schoolLayer))[0] - 1);
            int currentCounter = -1;
            if (shopIndex == 0 || schoolIndex == 0) {//NOT ASSIGNED SCENARIOS
                currentCounter = usedPerms.get("0");
            } else {
                currentCounter = usedPerms.get(shopIndex + "_" + schoolIndex);
            }

            usedPerms.put(shopIndex + "_" + schoolIndex, currentCounter + 1);
        }

        counter = 1;
        int refinedCounter = 0;
        for (Map.Entry<String, Integer> entry : usedPerms.entrySet()) {
            String key = entry.getKey();
            Integer value = entry.getValue();
            if (value > 0) {
                refinedPermsbyUse.put(key, value);
                refinedPermsById.put(key, refinedCounter + 1);
                refinedCounter = refinedCounter + 1;
            }
            counter = counter + 1;
        }

        LayerDefinition tempLayer = new LayerDefinition("category", "voronoi_combination_v");
        tempLayer.categories = new String[refinedCounter + 1];
        tempLayer.colors = new Color[refinedCounter + 1];
        tempLayer.values = new double[refinedCounter + 1];

        tempLayer.categories[0] = "NOT ASSIGNED";
        tempLayer.colors[0] = new Color(2, 2, 2);
        tempLayer.values[0] = Double.valueOf(1);
//        for (int i = 1; i < counter + 1; i++) {
//            tempLayer.categories[i] = "combination " + String.valueOf(i);
//            tempLayer.colors[i] = new Color(Color.HSBtoRGB((float) i / (float) counter + 1 - 1, 1, 1));
//            tempLayer.values[i] = Double.valueOf(i + 1);
//        }

        int combinationCounter = 1;
        for (Map.Entry<String, Integer> entry : refinedPermsById.entrySet()) {
            String key = entry.getKey();
            Integer value = entry.getValue();
            tempLayer.categories[combinationCounter] = "combination " + key;
            tempLayer.colors[combinationCounter] = new Color(Color.HSBtoRGB((float) combinationCounter / (float) refinedCounter + 1 - 1, 1, 1));
            tempLayer.values[combinationCounter] = Double.valueOf(value);
            combinationCounter = combinationCounter + 1;
        }

        for (int i = 0; i < mainFParent.allData.all_Nodes.length; i++) {
            short shopIndex = (short) (((short[]) mainFParent.allData.all_Nodes[i].layers.get(shopLayer))[0] - 1);
            short schoolIndex = (short) (((short[]) mainFParent.allData.all_Nodes[i].layers.get(schoolLayer))[0] - 1);
            String combinationIndex;
            if (shopIndex == 0 || schoolIndex == 0) {//NOT ASSIGNED SCENARIOS
                combinationIndex = "0";
            } else {
                combinationIndex = String.valueOf(refinedPermsById.get(shopIndex + "_" + schoolIndex));
            }
            short[] val = new short[1];
//            if(combinationIndex==null){
//                System.out.println("combinationIndex: "+combinationIndex);
//            }
            val[0] = (short) (Short.valueOf(combinationIndex) + 1);
//            if (val[0] == 0) {
//                System.out.println("!!!");
//            }
//            if (val[0] > 64) {
//                System.out.println("!!!");
//            }
            mainFParent.allData.all_Nodes[i].layers.add(val);
        }

        mainFParent.allData.all_Layers.add(tempLayer);
        mainFParent.refreshLayersList();
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        shopFacilities = initShopFacilities();
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        schoolFacilities = initSchoolFacilities();
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        (mainFParent.app).enqueue(new Callable() {
            public Object call() throws Exception {
                mainFParent.app.removeAllHeadquarters();
                if (shopFacilities != null) {
//                    mainFParent.app.removeAllHeadquarters();
                    for (int i = 0; i < shopFacilities.length; i++) {
                        mainFParent.app.headquarter(shopFacilities[i].renderingLocation, 0.4f, "center");
                    }
                }
                if (schoolFacilities != null) {
//                    mainFParent.app.removeAllHeadquarters();
                    for (int i = 0; i < schoolFacilities.length; i++) {
                        mainFParent.app.headquarter(schoolFacilities[i].renderingLocation, 0.4f, "candidate");
                    }
                }
                return null;
            }
        });
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        myParent.mainModel.allGISData.readCensusBlockGrioupPolygon("./datasets");

        System.out.println("num nodes: " + mainFParent.allData.all_Nodes.length);

        Long cBGForNodes[] = new Long[mainFParent.allData.all_Nodes.length];

        int numProcessors = myParent.mainModel.numCPUs;
        if (numProcessors > Runtime.getRuntime().availableProcessors()) {
            numProcessors = Runtime.getRuntime().availableProcessors();
        }
        ParallelLocationNodeCBGIdConnector parallelLocationNodeCBGIdConnector[] = new ParallelLocationNodeCBGIdConnector[numProcessors];

        for (int i = 0; i < numProcessors - 1; i++) {
            parallelLocationNodeCBGIdConnector[i] = new ParallelLocationNodeCBGIdConnector(i, this, cBGForNodes, (int) Math.floor(i * ((mainFParent.allData.all_Nodes.length) / numProcessors)), (int) Math.floor((i + 1) * ((mainFParent.allData.all_Nodes.length) / numProcessors)));
        }
        parallelLocationNodeCBGIdConnector[numProcessors - 1] = new ParallelLocationNodeCBGIdConnector(numProcessors - 1, this, cBGForNodes, (int) Math.floor((numProcessors - 1) * ((mainFParent.allData.all_Nodes.length) / numProcessors)), mainFParent.allData.all_Nodes.length);

        for (int i = 0; i < numProcessors; i++) {
            parallelLocationNodeCBGIdConnector[i].myThread.start();
        }
        for (int i = 0; i < numProcessors; i++) {
            try {
                parallelLocationNodeCBGIdConnector[i].myThread.join();
                System.out.println("thread " + i + "finished for location nodes: " + parallelLocationNodeCBGIdConnector[i].myStartIndex + " | " + parallelLocationNodeCBGIdConnector[i].myEndIndex);
            } catch (InterruptedException ie) {
                System.out.println(ie.toString());
            }
        }

        /*
        for (int u = 0; u < mainFParent.allData.all_Nodes.length; u++) {
            isCBGFound = false;
            for (int i = 0; i < myParent.mainModel.allGISData.countries.size(); i++) {
                for (int j = 0; j < myParent.mainModel.allGISData.countries.get(i).states.size(); j++) {
                    for (int k = 0; k < myParent.mainModel.allGISData.countries.get(i).states.get(j).counties.size(); k++) {
                        for (int m = 0; m < myParent.mainModel.allGISData.countries.get(i).states.get(j).counties.get(k).censusTracts.size(); m++) {
                            for (int v = 0; v < myParent.mainModel.allGISData.countries.get(i).states.get(j).counties.get(k).censusTracts.get(m).censusBlocks.size(); v++) {
                                for (int y = 0; y < myParent.mainModel.allGISData.countries.get(i).states.get(j).counties.get(k).censusTracts.get(m).censusBlocks.get(v).shape.size(); y++) {
                                    GeometryFactory geomFactory = new GeometryFactory();
                                    Point point = geomFactory.createPoint(new Coordinate(mainFParent.allData.all_Nodes[u].lon, mainFParent.allData.all_Nodes[u].lat));
                                    if (myParent.mainModel.allGISData.countries.get(i).states.get(j).counties.get(k).censusTracts.get(m).censusBlocks.get(v).shape.get(y).covers(point) == true) {
                                        censusBlockGroupsEncounteredList.add(myParent.mainModel.allGISData.countries.get(i).states.get(j).counties.get(k).censusTracts.get(m).censusBlocks.get(v).id);
                                        cBGForNodes[i] = myParent.mainModel.allGISData.countries.get(i).states.get(j).counties.get(k).censusTracts.get(m).censusBlocks.get(v).id;
                                        isCBGFound = true;
                                        break;
                                    }
                                }
                                if (isCBGFound == true) {
                                    break;
                                }
                            }
                            if (isCBGFound == true) {
                                break;
                            }
                        }
                        if (isCBGFound == true) {
                            break;
                        }
                    }
                    if (isCBGFound == true) {
                        break;
                    }
                }
                if (isCBGFound == true) {
                    break;
                }
            }
            if (isCBGFound == false) {
                System.out.println("SEVERE PROBLEM! LOCATION NODE HAS NOT CBG!");
            }
            System.out.println(counter);
            counter = counter + 1;
        }
         */
//        ArrayList<Long> censusBlockGroupsEncounteredList = new ArrayList();
        List<Long> censusBlockGroupsEncounteredList = Arrays.asList(cBGForNodes);

        LinkedHashSet<Long> censusBlockGroupsEncounteredUniqueSetHS = new LinkedHashSet(censusBlockGroupsEncounteredList);
        ArrayList<Long> censusBlockGroupsEncounteredUniqueList = new ArrayList(censusBlockGroupsEncounteredUniqueSetHS);
        Collections.sort(censusBlockGroupsEncounteredUniqueList);
        int numCBGs = censusBlockGroupsEncounteredUniqueList.size();
        int indices[] = new int[numCBGs];
        for (int i = 0; i < numCBGs; i++) {
            indices[i] = i + 1;
        }

        for (int u = 0; u < mainFParent.allData.all_Nodes.length; u++) {
            for (int j = 0; j < censusBlockGroupsEncounteredUniqueList.size(); j++) {
                if (cBGForNodes[u].equals(-1)) {
                    short[] val = new short[1];
                    val[0] = (short) (0);
                    mainFParent.allData.all_Nodes[u].layers.add(val);
                } else {
                    if (cBGForNodes[u].equals(censusBlockGroupsEncounteredUniqueList.get(j)) == true) {
                        short[] val = new short[1];
                        val[0] = (short) (indices[j]);
                        mainFParent.allData.all_Nodes[u].layers.add(val);
                    }
                }

            }
        }

        LayerDefinition tempLayer = new LayerDefinition("category", "censusBlockGroups");

        tempLayer.categories = new String[numCBGs];
        tempLayer.colors = new Color[numCBGs];
        tempLayer.values = new double[numCBGs];

        tempLayer.categories[0] = "NOT ASSIGNED";
        tempLayer.colors[0] = new Color(2, 2, 2);
        tempLayer.values[0] = Double.valueOf(0);
        for (int i = 1; i < numCBGs; i++) {
            tempLayer.categories[i] = "CBG " + String.valueOf(i);
            tempLayer.colors[i] = new Color(Color.HSBtoRGB((float) i / (float) numCBGs - 1, 1, 1));
            tempLayer.values[i] = Double.valueOf(censusBlockGroupsEncounteredUniqueList.get(i));
        }

        mainFParent.allData.all_Layers.add(tempLayer);
        mainFParent.refreshLayersList();
    }//GEN-LAST:event_jButton10ActionPerformed

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        ArrayList<LocationNodeSafegraph> shopLocations = initShopLocations();
        Integer indices[] = labelMergedFacilities(shopLocations, shopMergeThreshold);
        List<Integer> indicesRawList = Arrays.asList(indices);
        ArrayList<Integer> indicesList = new ArrayList(indicesRawList);
        LinkedHashSet<Integer> indicesUniqueSetHS = new LinkedHashSet(indicesList);
        ArrayList<Integer> indicesUniqueList = new ArrayList(indicesUniqueSetHS);
        ArrayList<LocationNodeSafegraph> shopMergedLocations = mergeFacilitiesWithIndices(shopLocations, indicesList, indicesUniqueList);

        int trafficLayerIndex = -1;
        for (int i = 0; i < mainFParent.allData.all_Layers.size(); i++) {
            if (((LayerDefinition) mainFParent.allData.all_Layers.get(i)).layerName.toLowerCase().contains("traffic")) {
                trafficLayerIndex = i;
            }
        }

        int numVisitsToNearestOrder[] = new int[shopMergedLocations.size()];

        int numProcessors = myParent.mainModel.numCPUs;
        if (numProcessors > Runtime.getRuntime().availableProcessors()) {
            numProcessors = Runtime.getRuntime().availableProcessors();
        }

        mainFParent.allData.setParallelLayers(numProcessors, -1);

        for (int i = 0; i < myParent.mainModel.safegraph.allPatterns.monthlyPatternsList.size(); i++) {
            for (int j = 0; j < myParent.mainModel.safegraph.allPatterns.monthlyPatternsList.get(i).patternRecords.size(); j++) {
                if (isFoodAndGrocery(myParent.mainModel.safegraph.allPatterns.monthlyPatternsList.get(i).patternRecords.get(j).place.naics_code) == true) {
                    LocationNode place = getNearestNode(myParent.mainModel.safegraph.allPatterns.monthlyPatternsList.get(i).patternRecords.get(j).place.lat, myParent.mainModel.safegraph.allPatterns.monthlyPatternsList.get(i).patternRecords.get(j).place.lon);
                    if (place != null) {

                        boolean isUniqueLocationNode = true;
                        int shopIndex = -1;
                        for (int b = 0; b < shopLocations.size(); b++) {
                            if (shopLocations.get(b).node.lat == place.lat && shopLocations.get(b).node.lon == place.lon) {
                                isUniqueLocationNode = false;
                                shopIndex = b;
                                break;
                            }
                        }

                        int shopGroupIndex = -1;
                        for (int y = 0; y < indicesUniqueList.size(); y++) {
                            if (indicesUniqueList.get(y).equals(indicesList.get(shopIndex))) {
                                shopGroupIndex = y;
                                break;
                            }
                        }

//                        int shopGroupIndex = indicesList.get(shopIndex);
                        LocationNodeSafegraph targetShopGroup = shopMergedLocations.get(shopGroupIndex);

                        if (isUniqueLocationNode == false) {
                            if (myParent.mainModel.safegraph.allPatterns.monthlyPatternsList.get(i).patternRecords.get(j).visitor_home_cbgs != null) {
                                for (int k = 0; k < myParent.mainModel.safegraph.allPatterns.monthlyPatternsList.get(i).patternRecords.get(j).visitor_home_cbgs.size(); k++) {
                                    CensusBlockGroup cBG = myParent.mainModel.allGISData.findCensusBlockGroup(myParent.mainModel.safegraph.allPatterns.monthlyPatternsList.get(i).patternRecords.get(j).visitor_home_cbgs.get(k).key);
                                    LocationNode home = getNearestNode(cBG.lon, cBG.lat);

                                    if (home == null) {
                                        float collisionPositionx = cBG.lat;
                                        float collisionPositiony = cBG.lon;
                                        double leastDistance = Double.POSITIVE_INFINITY;
                                        LocationNode nearestNode = mainFParent.allData.all_Nodes[0];
                                        for (int g = 0; g < mainFParent.allData.all_Nodes.length; g++) {
                                            //System.out.println(outputGrid.myNodes[i]);//WARNING, NULL POINTER SPOTTED, A GRID HAS A NULL LOCATIONNODE
                                            double dist = Math.sqrt(Math.pow(collisionPositionx - mainFParent.allData.all_Nodes[g].lat, 2) + Math.pow(collisionPositiony - mainFParent.allData.all_Nodes[g].lon, 2));
                                            if (dist < leastDistance) {
                                                nearestNode = mainFParent.allData.all_Nodes[g];
                                                leastDistance = dist;
                                            }
                                        }
                                        home = nearestNode;
                                    }

                                    Routing routing = new Routing(mainFParent.allData, trafficLayerIndex, 0);

                                    routing.findPath(home, targetShopGroup.node);
                                    double distanceToTarget = routing.pathDistance;

                                    double distancesToOtherTargets[] = new double[shopMergedLocations.size()];

                                    ParallelRouting parallelRouting[] = new ParallelRouting[numProcessors];

                                    for (int f = 0; f < numProcessors - 1; f++) {
                                        parallelRouting[f] = new ParallelRouting(f, this, distancesToOtherTargets, (int) Math.floor(f * ((shopMergedLocations.size()) / numProcessors)), (int) Math.floor((f + 1) * ((shopMergedLocations.size()) / numProcessors)), trafficLayerIndex, home, shopMergedLocations);
                                    }
                                    parallelRouting[numProcessors - 1] = new ParallelRouting(numProcessors - 1, this, distancesToOtherTargets, (int) Math.floor((numProcessors - 1) * ((shopMergedLocations.size()) / numProcessors)), shopMergedLocations.size(), trafficLayerIndex, home, shopMergedLocations);;

                                    for (int f = 0; f < numProcessors; f++) {
                                        parallelRouting[f].myThread.start();
                                    }
                                    for (int f = 0; f < numProcessors; f++) {
                                        try {
                                            parallelRouting[f].myThread.join();
//                                            for (int d = 0; d < parallelRouting[f].myData.length; d++) {
//                                                distancesToOtherTargets[d]=distancesToOtherTargets[d]+parallelRouting[f].myData[d];
//                                            }
//                                            System.out.println("thread " + f + "finished for location nodes: " + parallelRouting[f].myStartIndex + " | " + parallelRouting[f].myEndIndex);
                                        } catch (InterruptedException ie) {
                                            System.out.println(ie.toString());
                                        }
                                    }

//                                    for (int h = 0; h < shopMergedLocations.size(); h++) {
////                                    if (h != shopGroupIndex) {
//                                        Routing routingToOthers = new Routing(mainFParent.allData, trafficLayerIndex, 0);
//                                        routingToOthers.findPath(home, shopMergedLocations.get(h));
//                                        distancesToOtherTargets[h] = routingToOthers.pathDistance;
////                                    }
//                                    }
                                    Arrays.sort(distancesToOtherTargets);
                                    int orderNumber = -1;
                                    for (int m = 0; m < distancesToOtherTargets.length; m++) {
                                        if (distancesToOtherTargets[m] == distanceToTarget && distanceToTarget != Double.POSITIVE_INFINITY) {
                                            orderNumber = m;
                                            break;
                                        }
                                    }
                                    if (orderNumber != -1) {
                                        numVisitsToNearestOrder[orderNumber] = numVisitsToNearestOrder[orderNumber] + myParent.mainModel.safegraph.allPatterns.monthlyPatternsList.get(i).patternRecords.get(j).visitor_home_cbgs.get(k).value;
                                    }
                                }
                                for (int r = 0; r < numVisitsToNearestOrder.length; r++) {
                                    System.out.println(r + " " + numVisitsToNearestOrder[r]);
                                }
                            }
                        }
                    }
                }
            }
        }

        for (int i = 0; i < numVisitsToNearestOrder.length; i++) {
            System.out.println(i + " " + numVisitsToNearestOrder[i]);
        }
    }//GEN-LAST:event_jButton11ActionPerformed

    private void jButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton12ActionPerformed
        ArrayList<LocationNodeSafegraph> schoolLocations = initSchoolLocations();
        Integer indices[] = labelMergedFacilities(schoolLocations, shopMergeThreshold);
        List<Integer> indicesRawList = Arrays.asList(indices);
        ArrayList<Integer> indicesList = new ArrayList(indicesRawList);
        LinkedHashSet<Integer> indicesUniqueSetHS = new LinkedHashSet(indicesList);
        ArrayList<Integer> indicesUniqueList = new ArrayList(indicesUniqueSetHS);
        ArrayList<LocationNodeSafegraph> schoolMergedLocations = mergeFacilitiesWithIndices(schoolLocations, indicesList, indicesUniqueList);

        int trafficLayerIndex = -1;
        for (int i = 0; i < mainFParent.allData.all_Layers.size(); i++) {
            if (((LayerDefinition) mainFParent.allData.all_Layers.get(i)).layerName.toLowerCase().contains("traffic")) {
                trafficLayerIndex = i;
            }
        }

        int numVisitsToNearestOrder[] = new int[schoolMergedLocations.size()];

        int numProcessors = myParent.mainModel.numCPUs;
        if (numProcessors > Runtime.getRuntime().availableProcessors()) {
            numProcessors = Runtime.getRuntime().availableProcessors();
        }

        mainFParent.allData.setParallelLayers(numProcessors, -1);

        for (int i = 0; i < myParent.mainModel.safegraph.allPatterns.monthlyPatternsList.size(); i++) {
            for (int j = 0; j < myParent.mainModel.safegraph.allPatterns.monthlyPatternsList.get(i).patternRecords.size(); j++) {
                if (isSchool(myParent.mainModel.safegraph.allPatterns.monthlyPatternsList.get(i).patternRecords.get(j).place.naics_code) == true) {
                    LocationNode place = getNearestNode(myParent.mainModel.safegraph.allPatterns.monthlyPatternsList.get(i).patternRecords.get(j).place.lat, myParent.mainModel.safegraph.allPatterns.monthlyPatternsList.get(i).patternRecords.get(j).place.lon);
                    if (place != null) {

                        boolean isUniqueLocationNode = true;
                        int shopIndex = -1;
                        for (int b = 0; b < schoolLocations.size(); b++) {
                            if (schoolLocations.get(b).node.lat == place.lat && schoolLocations.get(b).node.lon == place.lon) {
                                isUniqueLocationNode = false;
                                shopIndex = b;
                                break;
                            }
                        }

                        int schoolGroupIndex = -1;
                        for (int y = 0; y < indicesUniqueList.size(); y++) {
                            if (indicesUniqueList.get(y).equals(indicesList.get(shopIndex))) {
                                schoolGroupIndex = y;
                                break;
                            }
                        }

//                        int shopGroupIndex = indicesList.get(shopIndex);
                        LocationNodeSafegraph targetShopGroup = schoolMergedLocations.get(schoolGroupIndex);

                        if (isUniqueLocationNode == false) {
                            if (myParent.mainModel.safegraph.allPatterns.monthlyPatternsList.get(i).patternRecords.get(j).visitor_home_cbgs != null) {
                                for (int k = 0; k < myParent.mainModel.safegraph.allPatterns.monthlyPatternsList.get(i).patternRecords.get(j).visitor_home_cbgs.size(); k++) {
                                    CensusBlockGroup cBG = myParent.mainModel.allGISData.findCensusBlockGroup(myParent.mainModel.safegraph.allPatterns.monthlyPatternsList.get(i).patternRecords.get(j).visitor_home_cbgs.get(k).key);
                                    LocationNode home = getNearestNode(cBG.lon, cBG.lat);

                                    if (home == null) {
                                        float collisionPositionx = cBG.lat;
                                        float collisionPositiony = cBG.lon;
                                        double leastDistance = Double.POSITIVE_INFINITY;
                                        LocationNode nearestNode = mainFParent.allData.all_Nodes[0];
                                        for (int g = 0; g < mainFParent.allData.all_Nodes.length; g++) {
                                            //System.out.println(outputGrid.myNodes[i]);//WARNING, NULL POINTER SPOTTED, A GRID HAS A NULL LOCATIONNODE
                                            double dist = Math.sqrt(Math.pow(collisionPositionx - mainFParent.allData.all_Nodes[g].lat, 2) + Math.pow(collisionPositiony - mainFParent.allData.all_Nodes[g].lon, 2));
                                            if (dist < leastDistance) {
                                                nearestNode = mainFParent.allData.all_Nodes[g];
                                                leastDistance = dist;
                                            }
                                        }
                                        home = nearestNode;
                                    }

                                    Routing routing = new Routing(mainFParent.allData, trafficLayerIndex, 0);

                                    routing.findPath(home, targetShopGroup.node);
                                    double distanceToTarget = routing.pathDistance;

                                    double distancesToOtherTargets[] = new double[schoolMergedLocations.size()];

                                    ParallelRouting parallelRouting[] = new ParallelRouting[numProcessors];

                                    for (int f = 0; f < numProcessors - 1; f++) {
                                        parallelRouting[f] = new ParallelRouting(f, this, distancesToOtherTargets, (int) Math.floor(f * ((schoolMergedLocations.size()) / numProcessors)), (int) Math.floor((f + 1) * ((schoolMergedLocations.size()) / numProcessors)), trafficLayerIndex, home, schoolMergedLocations);
                                    }
                                    parallelRouting[numProcessors - 1] = new ParallelRouting(numProcessors - 1, this, distancesToOtherTargets, (int) Math.floor((numProcessors - 1) * ((schoolMergedLocations.size()) / numProcessors)), schoolMergedLocations.size(), trafficLayerIndex, home, schoolMergedLocations);;

                                    for (int f = 0; f < numProcessors; f++) {
                                        parallelRouting[f].myThread.start();
                                    }
                                    for (int f = 0; f < numProcessors; f++) {
                                        try {
                                            parallelRouting[f].myThread.join();
//                                            for (int d = 0; d < parallelRouting[f].myData.length; d++) {
//                                                distancesToOtherTargets[d]=distancesToOtherTargets[d]+parallelRouting[f].myData[d];
//                                            }
//                                            System.out.println("thread " + f + "finished for location nodes: " + parallelRouting[f].myStartIndex + " | " + parallelRouting[f].myEndIndex);
                                        } catch (InterruptedException ie) {
                                            System.out.println(ie.toString());
                                        }
                                    }

//                                    for (int h = 0; h < shopMergedLocations.size(); h++) {
////                                    if (h != shopGroupIndex) {
//                                        Routing routingToOthers = new Routing(mainFParent.allData, trafficLayerIndex, 0);
//                                        routingToOthers.findPath(home, shopMergedLocations.get(h));
//                                        distancesToOtherTargets[h] = routingToOthers.pathDistance;
////                                    }
//                                    }
                                    Arrays.sort(distancesToOtherTargets);
                                    int orderNumber = -1;
                                    for (int m = 0; m < distancesToOtherTargets.length; m++) {
                                        if (distancesToOtherTargets[m] == distanceToTarget && distanceToTarget != Double.POSITIVE_INFINITY) {
                                            orderNumber = m;
                                            break;
                                        }
                                    }
                                    if (orderNumber != -1) {
                                        numVisitsToNearestOrder[orderNumber] = numVisitsToNearestOrder[orderNumber] + myParent.mainModel.safegraph.allPatterns.monthlyPatternsList.get(i).patternRecords.get(j).visitor_home_cbgs.get(k).value;
                                    }
                                }
                                for (int r = 0; r < numVisitsToNearestOrder.length; r++) {
                                    System.out.println(r + " " + numVisitsToNearestOrder[r]);
                                }
                            }
                        }
                    }
                }
            }
        }

        for (int i = 0; i < numVisitsToNearestOrder.length; i++) {
            System.out.println(i + " " + numVisitsToNearestOrder[i]);
        }
    }//GEN-LAST:event_jButton12ActionPerformed

    private void jButton13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton13ActionPerformed
        ArrayList<LocationNodeSafegraph> templeLocations = initTempleLocations();
        Integer indices[] = labelMergedFacilities(templeLocations, templeMergeThreshold);
        List<Integer> indicesRawList = Arrays.asList(indices);
        ArrayList<Integer> indicesList = new ArrayList(indicesRawList);
        LinkedHashSet<Integer> indicesUniqueSetHS = new LinkedHashSet(indicesList);
        ArrayList<Integer> indicesUniqueList = new ArrayList(indicesUniqueSetHS);
        ArrayList<LocationNodeSafegraph> templeMergedLocations = mergeFacilitiesWithIndices(templeLocations, indicesList, indicesUniqueList);

        int trafficLayerIndex = -1;
        for (int i = 0; i < mainFParent.allData.all_Layers.size(); i++) {
            if (((LayerDefinition) mainFParent.allData.all_Layers.get(i)).layerName.toLowerCase().contains("traffic")) {
                trafficLayerIndex = i;
            }
        }

        int numVisitsToNearestOrder[] = new int[templeMergedLocations.size()];

        int numProcessors = myParent.mainModel.numCPUs;
        if (numProcessors > Runtime.getRuntime().availableProcessors()) {
            numProcessors = Runtime.getRuntime().availableProcessors();
        }

        mainFParent.allData.setParallelLayers(numProcessors, -1);

        for (int i = 0; i < myParent.mainModel.safegraph.allPatterns.monthlyPatternsList.size(); i++) {
            for (int j = 0; j < myParent.mainModel.safegraph.allPatterns.monthlyPatternsList.get(i).patternRecords.size(); j++) {
                if (isReligiousOrganization(myParent.mainModel.safegraph.allPatterns.monthlyPatternsList.get(i).patternRecords.get(j).place.naics_code) == true) {
                    LocationNode place = getNearestNode(myParent.mainModel.safegraph.allPatterns.monthlyPatternsList.get(i).patternRecords.get(j).place.lat, myParent.mainModel.safegraph.allPatterns.monthlyPatternsList.get(i).patternRecords.get(j).place.lon);
                    if (place != null) {

                        boolean isUniqueLocationNode = true;
                        int templeIndex = -1;
                        for (int b = 0; b < templeLocations.size(); b++) {
                            if (templeLocations.get(b).node.lat == place.lat && templeLocations.get(b).node.lon == place.lon) {
                                isUniqueLocationNode = false;
                                templeIndex = b;
                                break;
                            }
                        }

                        int templeGroupIndex = -1;
                        for (int y = 0; y < indicesUniqueList.size(); y++) {
                            if (indicesUniqueList.get(y).equals(indicesList.get(templeIndex))) {
                                templeGroupIndex = y;
                                break;
                            }
                        }

//                        int shopGroupIndex = indicesList.get(shopIndex);
                        LocationNodeSafegraph targetShopGroup = templeMergedLocations.get(templeGroupIndex);

                        if (isUniqueLocationNode == false) {
                            if (myParent.mainModel.safegraph.allPatterns.monthlyPatternsList.get(i).patternRecords.get(j).visitor_home_cbgs != null) {
                                for (int k = 0; k < myParent.mainModel.safegraph.allPatterns.monthlyPatternsList.get(i).patternRecords.get(j).visitor_home_cbgs.size(); k++) {
                                    CensusBlockGroup cBG = myParent.mainModel.allGISData.findCensusBlockGroup(myParent.mainModel.safegraph.allPatterns.monthlyPatternsList.get(i).patternRecords.get(j).visitor_home_cbgs.get(k).key);
                                    LocationNode home = getNearestNode(cBG.lon, cBG.lat);

                                    if (home == null) {
                                        float collisionPositionx = cBG.lat;
                                        float collisionPositiony = cBG.lon;
                                        double leastDistance = Double.POSITIVE_INFINITY;
                                        LocationNode nearestNode = mainFParent.allData.all_Nodes[0];
                                        for (int g = 0; g < mainFParent.allData.all_Nodes.length; g++) {
                                            //System.out.println(outputGrid.myNodes[i]);//WARNING, NULL POINTER SPOTTED, A GRID HAS A NULL LOCATIONNODE
                                            double dist = Math.sqrt(Math.pow(collisionPositionx - mainFParent.allData.all_Nodes[g].lat, 2) + Math.pow(collisionPositiony - mainFParent.allData.all_Nodes[g].lon, 2));
                                            if (dist < leastDistance) {
                                                nearestNode = mainFParent.allData.all_Nodes[g];
                                                leastDistance = dist;
                                            }
                                        }
                                        home = nearestNode;
                                    }

                                    Routing routing = new Routing(mainFParent.allData, trafficLayerIndex, 0);

                                    routing.findPath(home, targetShopGroup.node);
                                    double distanceToTarget = routing.pathDistance;

                                    double distancesToOtherTargets[] = new double[templeMergedLocations.size()];

                                    ParallelRouting parallelRouting[] = new ParallelRouting[numProcessors];

                                    for (int f = 0; f < numProcessors - 1; f++) {
                                        parallelRouting[f] = new ParallelRouting(f, this, distancesToOtherTargets, (int) Math.floor(f * ((templeMergedLocations.size()) / numProcessors)), (int) Math.floor((f + 1) * ((templeMergedLocations.size()) / numProcessors)), trafficLayerIndex, home, templeMergedLocations);
                                    }
                                    parallelRouting[numProcessors - 1] = new ParallelRouting(numProcessors - 1, this, distancesToOtherTargets, (int) Math.floor((numProcessors - 1) * ((templeMergedLocations.size()) / numProcessors)), templeMergedLocations.size(), trafficLayerIndex, home, templeMergedLocations);;

                                    for (int f = 0; f < numProcessors; f++) {
                                        parallelRouting[f].myThread.start();
                                    }
                                    for (int f = 0; f < numProcessors; f++) {
                                        try {
                                            parallelRouting[f].myThread.join();
//                                            for (int d = 0; d < parallelRouting[f].myData.length; d++) {
//                                                distancesToOtherTargets[d]=distancesToOtherTargets[d]+parallelRouting[f].myData[d];
//                                            }
//                                            System.out.println("thread " + f + "finished for location nodes: " + parallelRouting[f].myStartIndex + " | " + parallelRouting[f].myEndIndex);
                                        } catch (InterruptedException ie) {
                                            System.out.println(ie.toString());
                                        }
                                    }

//                                    for (int h = 0; h < shopMergedLocations.size(); h++) {
////                                    if (h != shopGroupIndex) {
//                                        Routing routingToOthers = new Routing(mainFParent.allData, trafficLayerIndex, 0);
//                                        routingToOthers.findPath(home, shopMergedLocations.get(h));
//                                        distancesToOtherTargets[h] = routingToOthers.pathDistance;
////                                    }
//                                    }
                                    Arrays.sort(distancesToOtherTargets);
                                    int orderNumber = -1;
                                    for (int m = 0; m < distancesToOtherTargets.length; m++) {
                                        if (distancesToOtherTargets[m] == distanceToTarget && distanceToTarget != Double.POSITIVE_INFINITY) {
                                            orderNumber = m;
                                            break;
                                        }
                                    }
                                    if (orderNumber != -1) {
                                        numVisitsToNearestOrder[orderNumber] = numVisitsToNearestOrder[orderNumber] + myParent.mainModel.safegraph.allPatterns.monthlyPatternsList.get(i).patternRecords.get(j).visitor_home_cbgs.get(k).value;
                                    }
                                }
                                for (int r = 0; r < numVisitsToNearestOrder.length; r++) {
                                    System.out.println(r + " " + numVisitsToNearestOrder[r]);
                                }
                            }
                        }
                    }
                }
            }
        }

        for (int i = 0; i < numVisitsToNearestOrder.length; i++) {
            System.out.println(i + " " + numVisitsToNearestOrder[i]);
        }
    }//GEN-LAST:event_jButton13ActionPerformed

    private void jButton14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton14ActionPerformed
        ArrayList<LocationNodeSafegraph> shopLocations = initShopLocations();
        Integer indices[] = labelMergedFacilities(shopLocations, shopMergeThreshold);
        List<Integer> indicesRawList = Arrays.asList(indices);
        ArrayList<Integer> indicesList = new ArrayList(indicesRawList);
        LinkedHashSet<Integer> indicesUniqueSetHS = new LinkedHashSet(indicesList);
        ArrayList<Integer> indicesUniqueList = new ArrayList(indicesUniqueSetHS);
        ArrayList<LocationNodeSafegraph> shopMergedLocations = mergeFacilitiesWithIndices(shopLocations, indicesList, indicesUniqueList);

        int trafficLayerIndex = -1;
        for (int i = 0; i < mainFParent.allData.all_Layers.size(); i++) {
            if (((LayerDefinition) mainFParent.allData.all_Layers.get(i)).layerName.toLowerCase().contains("traffic")) {
                trafficLayerIndex = i;
            }
        }

        int numVisitsToNearestOrder[] = new int[shopMergedLocations.size()];

        int numProcessors = myParent.mainModel.numCPUs;
        if (numProcessors > Runtime.getRuntime().availableProcessors()) {
            numProcessors = Runtime.getRuntime().availableProcessors();
        }

        mainFParent.allData.setParallelLayers(numProcessors, -1);

        for (int i = 0; i < myParent.mainModel.safegraph.allPatterns.monthlyPatternsList.size(); i++) {
            for (int j = 0; j < myParent.mainModel.safegraph.allPatterns.monthlyPatternsList.get(i).patternRecords.size(); j++) {
                if (isFoodAndGrocery(myParent.mainModel.safegraph.allPatterns.monthlyPatternsList.get(i).patternRecords.get(j).place.naics_code) == true) {
                    LocationNode place = getNearestNode(myParent.mainModel.safegraph.allPatterns.monthlyPatternsList.get(i).patternRecords.get(j).place.lat, myParent.mainModel.safegraph.allPatterns.monthlyPatternsList.get(i).patternRecords.get(j).place.lon);
                    if (place != null) {

                        boolean isUniqueLocationNode = true;
                        int shopIndex = -1;
                        for (int b = 0; b < shopLocations.size(); b++) {
                            if (shopLocations.get(b).node.lat == place.lat && shopLocations.get(b).node.lon == place.lon) {
                                isUniqueLocationNode = false;
                                shopIndex = b;
                                break;
                            }
                        }

                        int shopGroupIndex = -1;
                        for (int y = 0; y < indicesUniqueList.size(); y++) {
                            if (indicesUniqueList.get(y).equals(indicesList.get(shopIndex))) {
                                shopGroupIndex = y;
                                break;
                            }
                        }

//                        int shopGroupIndex = indicesList.get(shopIndex);
                        LocationNodeSafegraph targetShopGroup = shopMergedLocations.get(shopGroupIndex);

                        if (isUniqueLocationNode == false) {
                            if (myParent.mainModel.safegraph.allPatterns.monthlyPatternsList.get(i).patternRecords.get(j).visitor_daytime_cbgs != null) {
                                for (int k = 0; k < myParent.mainModel.safegraph.allPatterns.monthlyPatternsList.get(i).patternRecords.get(j).visitor_daytime_cbgs.size(); k++) {
                                    CensusBlockGroup cBG = myParent.mainModel.allGISData.findCensusBlockGroup(myParent.mainModel.safegraph.allPatterns.monthlyPatternsList.get(i).patternRecords.get(j).visitor_daytime_cbgs.get(k).key);
                                    LocationNode work = getNearestNode(cBG.lon, cBG.lat);

                                    if (work == null) {
                                        float collisionPositionx = cBG.lat;
                                        float collisionPositiony = cBG.lon;
                                        double leastDistance = Double.POSITIVE_INFINITY;
                                        LocationNode nearestNode = mainFParent.allData.all_Nodes[0];
                                        for (int g = 0; g < mainFParent.allData.all_Nodes.length; g++) {
                                            //System.out.println(outputGrid.myNodes[i]);//WARNING, NULL POINTER SPOTTED, A GRID HAS A NULL LOCATIONNODE
                                            double dist = Math.sqrt(Math.pow(collisionPositionx - mainFParent.allData.all_Nodes[g].lat, 2) + Math.pow(collisionPositiony - mainFParent.allData.all_Nodes[g].lon, 2));
                                            if (dist < leastDistance) {
                                                nearestNode = mainFParent.allData.all_Nodes[g];
                                                leastDistance = dist;
                                            }
                                        }
                                        work = nearestNode;
                                    }

                                    Routing routing = new Routing(mainFParent.allData, trafficLayerIndex, 0);

                                    routing.findPath(work, targetShopGroup.node);
                                    double distanceToTarget = routing.pathDistance;

                                    double distancesToOtherTargets[] = new double[shopMergedLocations.size()];

                                    ParallelRouting parallelRouting[] = new ParallelRouting[numProcessors];

                                    for (int f = 0; f < numProcessors - 1; f++) {
                                        parallelRouting[f] = new ParallelRouting(f, this, distancesToOtherTargets, (int) Math.floor(f * ((shopMergedLocations.size()) / numProcessors)), (int) Math.floor((f + 1) * ((shopMergedLocations.size()) / numProcessors)), trafficLayerIndex, work, shopMergedLocations);
                                    }
                                    parallelRouting[numProcessors - 1] = new ParallelRouting(numProcessors - 1, this, distancesToOtherTargets, (int) Math.floor((numProcessors - 1) * ((shopMergedLocations.size()) / numProcessors)), shopMergedLocations.size(), trafficLayerIndex, work, shopMergedLocations);;

                                    for (int f = 0; f < numProcessors; f++) {
                                        parallelRouting[f].myThread.start();
                                    }
                                    for (int f = 0; f < numProcessors; f++) {
                                        try {
                                            parallelRouting[f].myThread.join();
//                                            for (int d = 0; d < parallelRouting[f].myData.length; d++) {
//                                                distancesToOtherTargets[d]=distancesToOtherTargets[d]+parallelRouting[f].myData[d];
//                                            }
//                                            System.out.println("thread " + f + "finished for location nodes: " + parallelRouting[f].myStartIndex + " | " + parallelRouting[f].myEndIndex);
                                        } catch (InterruptedException ie) {
                                            System.out.println(ie.toString());
                                        }
                                    }

//                                    for (int h = 0; h < shopMergedLocations.size(); h++) {
////                                    if (h != shopGroupIndex) {
//                                        Routing routingToOthers = new Routing(mainFParent.allData, trafficLayerIndex, 0);
//                                        routingToOthers.findPath(home, shopMergedLocations.get(h));
//                                        distancesToOtherTargets[h] = routingToOthers.pathDistance;
////                                    }
//                                    }
                                    Arrays.sort(distancesToOtherTargets);
                                    int orderNumber = -1;
                                    for (int m = 0; m < distancesToOtherTargets.length; m++) {
                                        if (distancesToOtherTargets[m] == distanceToTarget && distanceToTarget != Double.POSITIVE_INFINITY) {
                                            orderNumber = m;
                                            break;
                                        }
                                    }
                                    if (orderNumber != -1) {
                                        numVisitsToNearestOrder[orderNumber] = numVisitsToNearestOrder[orderNumber] + myParent.mainModel.safegraph.allPatterns.monthlyPatternsList.get(i).patternRecords.get(j).visitor_daytime_cbgs.get(k).value;
                                    }
                                }
                                for (int r = 0; r < numVisitsToNearestOrder.length; r++) {
                                    System.out.println(r + " " + numVisitsToNearestOrder[r]);
                                }
                            }
                        }
                    }
                }
            }
        }

        for (int i = 0; i < numVisitsToNearestOrder.length; i++) {
            System.out.println(i + " " + numVisitsToNearestOrder[i]);
        }
    }//GEN-LAST:event_jButton14ActionPerformed

    private void jButton15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton15ActionPerformed
        int comLayer = mainFParent.findLayer("voronoi_combination_v");
        int cBGLayer = mainFParent.findLayer("censusBlockGroups");

        int shopLayer = mainFParent.findLayer("shops_v");
        int schoolLayer = mainFParent.findLayer("schools_v");

        ArrayList<LocationNodeSafegraph> shopLocations = initShopLocations();
        Integer indices[] = labelMergedFacilities(shopLocations, shopMergeThreshold);
        List<Integer> indicesRawList = Arrays.asList(indices);
        ArrayList<Integer> indicesList = new ArrayList(indicesRawList);
        LinkedHashSet<Integer> indicesUniqueSetHS = new LinkedHashSet(indicesList);
        ArrayList<Integer> indicesUniqueList = new ArrayList(indicesUniqueSetHS);

        ArrayList<LocationNodeSafegraph> shops = mergeFacilitiesWithIndices(shopLocations, indicesList, indicesUniqueList);

        ArrayList<LocationNodeSafegraph> schoolLocations = initSchoolLocations();
        indices = labelMergedFacilities(schoolLocations, shopMergeThreshold);
        indicesRawList = Arrays.asList(indices);
        indicesList = new ArrayList(indicesRawList);
        indicesUniqueSetHS = new LinkedHashSet(indicesList);
        indicesUniqueList = new ArrayList(indicesUniqueSetHS);

        ArrayList<LocationNodeSafegraph> schools = mergeFacilitiesWithIndices(schoolLocations, indicesList, indicesUniqueList);

        System.out.println("ALL CBGS SIZE: " + ((LayerDefinition) mainFParent.allData.all_Layers.get(cBGLayer)).values.length);
        for (int i = 0; i < ((LayerDefinition) mainFParent.allData.all_Layers.get(cBGLayer)).values.length; i++) {
            System.out.println(i);
            if ((long) (((LayerDefinition) mainFParent.allData.all_Layers.get(cBGLayer)).values[i]) > 0) {
                CensusBlockGroup cBG = myParent.mainModel.allGISData.findCensusBlockGroup((long) (((LayerDefinition) mainFParent.allData.all_Layers.get(cBGLayer)).values[i]));
                if (cBG != null) {
                    for (int k = 0; k < mainFParent.allData.all_Nodes.length; k++) {
                        short cBGIndex = (short) (((short[]) mainFParent.allData.all_Nodes[k].layers.get(cBGLayer))[0] - 1);

                        if ((long) (((LayerDefinition) mainFParent.allData.all_Layers.get(cBGLayer)).values[cBGIndex]) < 1) {
                            continue;
                        }

                        CensusBlockGroup nodeCBG = myParent.mainModel.allGISData.findCensusBlockGroup((long) (((LayerDefinition) mainFParent.allData.all_Layers.get(cBGLayer)).values[cBGIndex]));

//                        if(nodeCBG==null){
//                            System.out.println(i);
//                        }
                        if (nodeCBG.id == cBG.id) {
                            short shopIndex = (short) (((short[]) mainFParent.allData.all_Nodes[k].layers.get(shopLayer))[0] - 1);
                            short schoolIndex = (short) (((short[]) mainFParent.allData.all_Nodes[k].layers.get(schoolLayer))[0] - 1);

                            if (shopIndex > 0) {
                                LocationNodeSafegraph targetShopGroup = shops.get(shopIndex - 1);
                                if (cBG.vDsPlacesShops == null) {
                                    cBG.vDsPlacesShops = new ArrayList();
                                    cBG.proportionOfVDsShops = new ArrayList();
                                    cBG.vDsPlacesShops.add(targetShopGroup.places);
                                    cBG.proportionOfVDsShops.add(1d);
                                } else {
                                    boolean isFound = false;
                                    for (int m = 0; m < cBG.vDsPlacesShops.size(); m++) {
                                        if (targetShopGroup.places.get(0) == cBG.vDsPlacesShops.get(m).get(0)) {
                                            cBG.proportionOfVDsShops.set(m, cBG.proportionOfVDsShops.get(m) + 1d);
                                            isFound = true;
                                            break;
                                        }
                                    }
                                    if (isFound == false) {
                                        cBG.vDsPlacesShops.add(targetShopGroup.places);
                                        cBG.proportionOfVDsShops.add(1d);
                                    }
                                }
                            }

                            if (schoolIndex > 0) {
                                LocationNodeSafegraph targetSchoolGroup = schools.get(schoolIndex - 1);
                                if (cBG.vDsPlacesSchools == null) {
                                    cBG.vDsPlacesSchools = new ArrayList();
                                    cBG.proportionOfVDsSchools = new ArrayList();
                                    cBG.vDsPlacesSchools.add(targetSchoolGroup.places);
                                    cBG.proportionOfVDsSchools.add(1d);
                                } else {
                                    boolean isFound = false;
                                    for (int m = 0; m < cBG.vDsPlacesSchools.size(); m++) {
                                        if (targetSchoolGroup.places.get(0) == cBG.vDsPlacesSchools.get(m).get(0)) {
                                            cBG.proportionOfVDsSchools.set(m, cBG.proportionOfVDsSchools.get(m) + 1d);
                                            isFound = true;
                                            break;
                                        }
                                    }
                                    if (isFound == false) {
                                        cBG.vDsPlacesSchools.add(targetSchoolGroup.places);
                                        cBG.proportionOfVDsSchools.add(1d);
                                    }
                                }
                            }

                        }

                    }

                }
            }
        }

        HashMap<String, String> perms = new HashMap();
        HashMap<String, Integer> usedPerms = new HashMap();
        HashMap<String, Integer> refinedPermsById = new HashMap();
        HashMap<String, Integer> refinedPermsbyUse = new HashMap();
        ArrayList<String> refinedPermsKeys = new ArrayList();
        int counter = 0;
        for (int i = 1; i < ((LayerDefinition) mainFParent.allData.all_Layers.get(comLayer)).categories.length; i++) {
            for (int j = 1; j < ((LayerDefinition) mainFParent.allData.all_Layers.get(cBGLayer)).categories.length; j++) {
                perms.put(i + "_" + j, String.valueOf(counter));
                usedPerms.put(i + "_" + j, 0);
                counter = counter + 1;
            }
        }
        usedPerms.put("0", 0);

        for (int i = 0; i < mainFParent.allData.all_Nodes.length; i++) {
            short shopIndex = (short) (((short[]) mainFParent.allData.all_Nodes[i].layers.get(comLayer))[0] - 1);
            short schoolIndex = (short) (((short[]) mainFParent.allData.all_Nodes[i].layers.get(cBGLayer))[0] - 1);
            int currentCounter = -1;
            if (shopIndex == 0 || schoolIndex == 0) {//NOT ASSIGNED SCENARIOS
                currentCounter = usedPerms.get("0");
            } else {
                currentCounter = usedPerms.get(shopIndex + "_" + schoolIndex);
            }

            usedPerms.put(shopIndex + "_" + schoolIndex, currentCounter + 1);
        }

        counter = 1;
        int refinedCounter = 0;
        for (Map.Entry<String, Integer> entry : usedPerms.entrySet()) {
            String key = entry.getKey();
            Integer value = entry.getValue();
            if (value > 0) {
                refinedPermsbyUse.put(key, value);
                refinedPermsById.put(key, refinedCounter + 1);
                refinedCounter = refinedCounter + 1;
            }
            counter = counter + 1;
        }

        LayerDefinition tempLayer = new LayerDefinition("category", "VDs_CBGs");
        tempLayer.categories = new String[refinedCounter + 1];
        tempLayer.colors = new Color[refinedCounter + 1];
        tempLayer.values = new double[refinedCounter + 1];

        tempLayer.categories[0] = "NOT ASSIGNED";
        tempLayer.colors[0] = new Color(2, 2, 2);
        tempLayer.values[0] = Double.valueOf(1);
//        for (int i = 1; i < counter + 1; i++) {
//            tempLayer.categories[i] = "combination " + String.valueOf(i);
//            tempLayer.colors[i] = new Color(Color.HSBtoRGB((float) i / (float) counter + 1 - 1, 1, 1));
//            tempLayer.values[i] = Double.valueOf(i + 1);
//        }

        int combinationCounter = 1;
        for (Map.Entry<String, Integer> entry : refinedPermsById.entrySet()) {
            String key = entry.getKey();
            Integer value = entry.getValue();
            tempLayer.categories[combinationCounter] = "combination " + key;
            tempLayer.colors[combinationCounter] = new Color(Color.HSBtoRGB((float) combinationCounter / (float) refinedCounter + 1 - 1, 1, 1));
            tempLayer.values[combinationCounter] = Double.valueOf(value);
            combinationCounter = combinationCounter + 1;
        }

        for (int i = 0; i < mainFParent.allData.all_Nodes.length; i++) {
            short shopIndex = (short) (((short[]) mainFParent.allData.all_Nodes[i].layers.get(comLayer))[0] - 1);
            short schoolIndex = (short) (((short[]) mainFParent.allData.all_Nodes[i].layers.get(cBGLayer))[0] - 1);
            String combinationIndex;
            if (shopIndex == 0 || schoolIndex == 0) {//NOT ASSIGNED SCENARIOS
                combinationIndex = "0";
            } else {
                combinationIndex = String.valueOf(refinedPermsById.get(shopIndex + "_" + schoolIndex));
            }
            short[] val = new short[1];
//            if(combinationIndex==null){
//                System.out.println("combinationIndex: "+combinationIndex);
//            }
            val[0] = (short) (Short.valueOf(combinationIndex) + 1);
//            if (val[0] == 0) {
//                System.out.println("!!!");
//            }
//            if (val[0] > 64) {
//                System.out.println("!!!");
//            }
            mainFParent.allData.all_Nodes[i].layers.add(val);
        }

        mainFParent.allData.all_Layers.add(tempLayer);
        mainFParent.refreshLayersList();
    }//GEN-LAST:event_jButton15ActionPerformed

    private void jButton16ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton16ActionPerformed
        int cBGIndex = mainFParent.findLayer("CBG");
        ConvexHull convHull;
        for (int i = 0; i < ((LayerDefinition) (mainFParent.allData.all_Layers.get(cBGIndex))).categories.length; i++) {
            ArrayList<Coordinate> coordsArrayList = new ArrayList();
            for (int j = 0; j < mainFParent.allData.all_Nodes.length; j++) {
                coordsArrayList.add(new Coordinate(mainFParent.allData.all_Nodes[j].lat, mainFParent.allData.all_Nodes[j].lon));
            }
            GeometryFactory geomFactory = new GeometryFactory();
            Coordinate coords[] = new Coordinate[coordsArrayList.size()];
            for (int m = 0; m < coordsArrayList.size(); m++) {
                coords[m] = coordsArrayList.get(m);
            }
            convHull = new ConvexHull(coords, geomFactory);
            Coordinate coordsConvex[]=convHull.getConvexHull().getCoordinates();
            
        }
    }//GEN-LAST:event_jButton16ActionPerformed

    private void jButton19ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton19ActionPerformed
        sketch.setCaseStudyPanZoom(((Marker) myParent.mainModel.ABM.studyScopeGeography).size * 52, new Location(((Marker) myParent.mainModel.ABM.studyScopeGeography).lon, ((Marker) myParent.mainModel.ABM.studyScopeGeography).lat));
    }//GEN-LAST:event_jButton19ActionPerformed

    private void jButton20ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton20ActionPerformed
        sketch = new COVIDGeoVisualization(this);
        sketch.startRendering();
    }//GEN-LAST:event_jButton20ActionPerformed

    public boolean isShop(int naicsCode) {
        String naicsString = String.valueOf(naicsCode);
        if (naicsString.startsWith("44511") || naicsString.startsWith("44512") || naicsString.startsWith("44711")) {
            return true;
        }
        return false;
    }

    public boolean isFoodAndGrocery(int naicsCode) {
        String naicsString = String.valueOf(naicsCode);
        if ((naicsString.startsWith("44") || naicsString.startsWith("45")) && !naicsString.startsWith("4411") && !naicsString.startsWith("4412") && !naicsString.startsWith("4413")) {
            return true;
        }
        return false;
    }

    public boolean isReligiousOrganization(int naicsCode) {
        String naicsString = String.valueOf(naicsCode);
        if (naicsString.startsWith("8131")) {
            return true;
        }
        return false;
    }

    public boolean isSchool(int naicsCode) {
        String naicsString = String.valueOf(naicsCode);
        if (naicsString.startsWith("61")) {
            return true;
        }
        return false;
    }

    public ArrayList<LocationNodeSafegraph> initShopLocations() {
        ArrayList<LocationNodeSafegraph> shops = new ArrayList();
        for (int i = 0; i < myParent.mainModel.safegraph.allSafegraphPlaces.monthlySafegraphPlacesList.size(); i++) {
            for (int j = 0; j < myParent.mainModel.safegraph.allSafegraphPlaces.monthlySafegraphPlacesList.get(i).placesRecords.size(); j++) {
                if (myParent.mainModel.safegraph.allSafegraphPlaces.monthlySafegraphPlacesList.get(i).placesRecords.get(j).censusBlock != null) {
                    if (isFoodAndGrocery(myParent.mainModel.safegraph.allSafegraphPlaces.monthlySafegraphPlacesList.get(i).placesRecords.get(j).naics_code) == true) {
                        LocationNode node = getNearestNode(myParent.mainModel.safegraph.allSafegraphPlaces.monthlySafegraphPlacesList.get(i).placesRecords.get(j).lat, myParent.mainModel.safegraph.allSafegraphPlaces.monthlySafegraphPlacesList.get(i).placesRecords.get(j).lon);
                        if (node != null) {
                            if (isUniqueLocationNode(shops, node)) {
                                LocationNodeSafegraph nodeSafegraph = new LocationNodeSafegraph();
                                nodeSafegraph.node = node;
                                nodeSafegraph.place = myParent.mainModel.safegraph.allSafegraphPlaces.monthlySafegraphPlacesList.get(i).placesRecords.get(j);
                                nodeSafegraph.placeKey = myParent.mainModel.safegraph.allSafegraphPlaces.monthlySafegraphPlacesList.get(i).placesRecords.get(j).placeKey;
                                shops.add(nodeSafegraph);
                            }
                        }
                    }
                }
            }
        }
        return shops;
    }

    public ArrayList<LocationNodeSafegraph> initSchoolLocations() {
        ArrayList<LocationNodeSafegraph> schools = new ArrayList();
        for (int i = 0; i < myParent.mainModel.safegraph.allSafegraphPlaces.monthlySafegraphPlacesList.size(); i++) {
            for (int j = 0; j < myParent.mainModel.safegraph.allSafegraphPlaces.monthlySafegraphPlacesList.get(i).placesRecords.size(); j++) {
                if (myParent.mainModel.safegraph.allSafegraphPlaces.monthlySafegraphPlacesList.get(i).placesRecords.get(j).censusBlock != null) {
                    if (isSchool(myParent.mainModel.safegraph.allSafegraphPlaces.monthlySafegraphPlacesList.get(i).placesRecords.get(j).naics_code) == true) {
                        LocationNode node = getNearestNode(myParent.mainModel.safegraph.allSafegraphPlaces.monthlySafegraphPlacesList.get(i).placesRecords.get(j).lat, myParent.mainModel.safegraph.allSafegraphPlaces.monthlySafegraphPlacesList.get(i).placesRecords.get(j).lon);
                        if (node != null) {
                            if (isUniqueLocationNode(schools, node)) {
                                LocationNodeSafegraph locationNodeSafegraph = new LocationNodeSafegraph();
                                locationNodeSafegraph.node = node;
                                locationNodeSafegraph.place = myParent.mainModel.safegraph.allSafegraphPlaces.monthlySafegraphPlacesList.get(i).placesRecords.get(j);
                                locationNodeSafegraph.placeKey = myParent.mainModel.safegraph.allSafegraphPlaces.monthlySafegraphPlacesList.get(i).placesRecords.get(j).placeKey;
                                schools.add(locationNodeSafegraph);
                            }
                        }
                    }
                }
            }
        }
        return schools;
    }

    public ArrayList<LocationNodeSafegraph> initTempleLocations() {
        ArrayList<LocationNodeSafegraph> temples = new ArrayList();
        for (int i = 0; i < myParent.mainModel.safegraph.allSafegraphPlaces.monthlySafegraphPlacesList.size(); i++) {
            for (int j = 0; j < myParent.mainModel.safegraph.allSafegraphPlaces.monthlySafegraphPlacesList.get(i).placesRecords.size(); j++) {
                if (myParent.mainModel.safegraph.allSafegraphPlaces.monthlySafegraphPlacesList.get(i).placesRecords.get(j).censusBlock != null) {
                    if (isReligiousOrganization(myParent.mainModel.safegraph.allSafegraphPlaces.monthlySafegraphPlacesList.get(i).placesRecords.get(j).naics_code) == true) {
                        LocationNode node = getNearestNode(myParent.mainModel.safegraph.allSafegraphPlaces.monthlySafegraphPlacesList.get(i).placesRecords.get(j).lat, myParent.mainModel.safegraph.allSafegraphPlaces.monthlySafegraphPlacesList.get(i).placesRecords.get(j).lon);
                        if (node != null) {
                            if (isUniqueLocationNode(temples, node)) {
                                LocationNodeSafegraph locationNodeSafegraph = new LocationNodeSafegraph();
                                locationNodeSafegraph.node = node;
                                locationNodeSafegraph.place = myParent.mainModel.safegraph.allSafegraphPlaces.monthlySafegraphPlacesList.get(i).placesRecords.get(j);
                                locationNodeSafegraph.placeKey = myParent.mainModel.safegraph.allSafegraphPlaces.monthlySafegraphPlacesList.get(i).placesRecords.get(j).placeKey;
                                temples.add(locationNodeSafegraph);
                            }
                        }
                    }
                }
            }
        }
        return temples;
    }

    public FacilityLocation[] initShopFacilities() {
        ArrayList<LocationNodeSafegraph> shopLocations = initShopLocations();
        Integer indices[] = labelMergedFacilities(shopLocations, shopMergeThreshold);
        List<Integer> indicesRawList = Arrays.asList(indices);
        ArrayList<Integer> indicesList = new ArrayList(indicesRawList);
        LinkedHashSet<Integer> indicesUniqueSetHS = new LinkedHashSet(indicesList);
        ArrayList<Integer> indicesUniqueList = new ArrayList(indicesUniqueSetHS);

        System.out.println("Initial number of shops: " + shopLocations.size());
        ArrayList<LocationNodeSafegraph> shops = mergeFacilitiesWithIndices(shopLocations, indicesList, indicesUniqueList);

        int numFacilities = shops.size();
        FacilityLocation output[] = new FacilityLocation[numFacilities];
        Color colors[] = new Color[numFacilities];
        for (int i = 0; i < numFacilities; i++) {
            colors[i] = new Color(Color.HSBtoRGB((float) i / (float) numFacilities - 1, 1, 1));

        }
        for (int i = 0; i < numFacilities; i++) {
            output[i] = new FacilityLocation(mainFParent, shops.get(i).node, shops.get(i).node.myWays[0], 20d);
            output[i].color = colors[i];
            output[i].isDecoyable = true;
            output[i].tollOff = 0.5;//IMP
        }
        System.out.println("shops generated: " + output.length);
        return output;
    }

//    public ArrayList<LocationNodeSafegraph> mergeFacilities(ArrayList<LocationNodeSafegraph> input, float threshold) {
//        ArrayList<LocationNodeSafegraph> checker = new ArrayList();
//
////        for (int i = 0; i < input.size(); i++) {
////            checker.add(new LocationNode(input.get(i).id,input.get(i).lat,input.get(i).lon,input.get(i).myOrder));
////        }
//        for (int i = 0; i < input.size(); i++) {
//            boolean tooClose = false;
//            for (int j = 0; j < input.size(); j++) {
//                if (i != j) {
//                    if (Math.sqrt(Math.pow(input.get(i).lat - input.get(j).lat, 2) + Math.pow(input.get(i).lon - input.get(j).lon, 2)) < threshold) {
//                        tooClose = true;
//                    } else {
//
//                    }
//                }
//            }
//            if (tooClose == false) {
//                LocationNode node=new LocationNode(input.get(i).node.id, input.get(i).node.lat, input.get(i).node.lon, input.get(i).node.myOrder);
//                LocationNodeSafegraph locationNodeSafegraph=new LocationNodeSafegraph();
//                locationNodeSafegraph.node=node;
//                locationNodeSafegraph.
//                checker.add(new LocationNodeSafegraph(input.get(i).node.id, input.get(i).node.lat, input.get(i).node.lon, input.get(i).node.myOrder));
//            }
//        }
//        ArrayList<LocationNodeSafegraph> output = new ArrayList();
//
//        for (int i = 0; i < checker.size(); i++) {
//            checker.get(i).node = getNearestNode((float) checker.get(i).node.lat, (float) checker.get(i).node.lon);
//            output.add(checker.get(i));
//        }
//        return output;
//    }
    public ArrayList<LocationNodeSafegraph> mergeFacilitiesWithIndices(ArrayList<LocationNodeSafegraph> input, ArrayList<Integer> allIndices, ArrayList<Integer> uniqueIndices) {
        LocationNodeSafegraph[] centroids = new LocationNodeSafegraph[uniqueIndices.size()];
        for (int i = 0; i < allIndices.size(); i++) {
            int index = -1;
            for (int j = 0; j < uniqueIndices.size(); j++) {
                if (allIndices.get(i).equals(uniqueIndices.get(j))) {
                    index = j;
                    break;
                }
            }
            if (centroids[index] == null) {
                LocationNodeSafegraph locationNodeSafegraph = new LocationNodeSafegraph();
                locationNodeSafegraph.node = input.get(i).node;
                if (locationNodeSafegraph.placeKeys == null) {
                    locationNodeSafegraph.places = new ArrayList();
                    locationNodeSafegraph.places.add(input.get(i).place);
                    locationNodeSafegraph.placeKeys = new ArrayList();
                    locationNodeSafegraph.placeKeys.add(input.get(i).placeKey);
                } else {
                    locationNodeSafegraph.places.add(input.get(i).place);
                    locationNodeSafegraph.placeKeys.add(input.get(i).placeKey);
                }
                centroids[index] = locationNodeSafegraph;
            } else {
                LocationNodeSafegraph locationNodeSafegraph = centroids[index];
                locationNodeSafegraph.node = new LocationNode(0, (centroids[index].node.lat + input.get(i).node.lat) / 2f, (centroids[index].node.lon + input.get(i).node.lon) / 2f, 0);
                if (locationNodeSafegraph.placeKeys == null) {
                    locationNodeSafegraph.places = new ArrayList();
                    locationNodeSafegraph.places.add(input.get(i).place);
                    locationNodeSafegraph.placeKeys = new ArrayList();
                    locationNodeSafegraph.placeKeys.add(input.get(i).placeKey);
                } else {
                    locationNodeSafegraph.places.add(input.get(i).place);
                    locationNodeSafegraph.placeKeys.add(input.get(i).placeKey);
                }
                centroids[index] = locationNodeSafegraph;
            }
        }
        ArrayList<LocationNodeSafegraph> output = new ArrayList();

        for (int i = 0; i < centroids.length; i++) {
            centroids[i].node = getNearestNode((float) centroids[i].node.lat, (float) centroids[i].node.lon);
            output.add(centroids[i]);
        }

        return output;
    }

    public Integer[] labelMergedFacilities(ArrayList<LocationNodeSafegraph> input, float threshold) {
        Integer output[] = new Integer[input.size()];
        for (int i = 0; i < input.size(); i++) {
            output[i] = i;
        }
        for (int i = 0; i < input.size(); i++) {
//            boolean tooClose = false;
            for (int j = 0; j < input.size(); j++) {
                if (i != j) {
                    if (Math.sqrt(Math.pow(input.get(i).node.lat - input.get(j).node.lat, 2) + Math.pow(input.get(i).node.lon - input.get(j).node.lon, 2)) < threshold) {
//                        tooClose = true;
                        output[j] = (int) (output[i]);
                    } else {

                    }
                }
            }
//            if (tooClose == true) {
//                
////                checker.add(new LocationNode(input.get(i).id, input.get(i).lat, input.get(i).lon, input.get(i).myOrder));
//            }
        }

//        ArrayList<LocationNode> output = new ArrayList();
//
//        for (int i = 0; i < checker.size(); i++) {
//            output.add(getNearestNode((float) checker.get(i).lat, (float) checker.get(i).lon));
//        }
        return output;
    }

    public FacilityLocation[] initSchoolFacilities() {
        ArrayList<LocationNodeSafegraph> schoolLocations = initSchoolLocations();
        Integer indices[] = labelMergedFacilities(schoolLocations, shopMergeThreshold);
        List<Integer> indicesRawList = Arrays.asList(indices);
        ArrayList<Integer> indicesList = new ArrayList(indicesRawList);
        LinkedHashSet<Integer> indicesUniqueSetHS = new LinkedHashSet(indicesList);
        ArrayList<Integer> indicesUniqueList = new ArrayList(indicesUniqueSetHS);

        System.out.println("Initial number of shops: " + schoolLocations.size());
        ArrayList<LocationNodeSafegraph> schools = mergeFacilitiesWithIndices(schoolLocations, indicesList, indicesUniqueList);

        int numFacilities = schools.size();
        FacilityLocation output[] = new FacilityLocation[numFacilities];
        Color colors[] = new Color[numFacilities];
        for (int i = 0; i < numFacilities; i++) {
            colors[i] = new Color(Color.HSBtoRGB((float) i / (float) numFacilities - 1, 1, 1));

        }
        for (int i = 0; i < numFacilities; i++) {
            output[i] = new FacilityLocation(mainFParent, schools.get(i).node, schools.get(i).node.myWays[0], 20d);
            output[i].color = colors[i];
            output[i].isDecoyable = true;
            output[i].tollOff = 0.5;//IMP
        }
        System.out.println("shops generated: " + output.length);
        return output;
    }

    public boolean isUniqueLocationNode(ArrayList<LocationNodeSafegraph> list, LocationNode input) {
        for (int i = 0; i < list.size(); i++) {
            if (list.get(i).node.lat == input.lat && list.get(i).node.lon == input.lon) {
                return false;
            }
        }
        return true;
    }

    public LocationNode getNearestNode(float collisionPositionx, float collisionPositiony) {
        boolean isValidCollition = false;
        Grid outputGrid = new Grid(0, 0, 0, 0, 0, 0, "");
        for (int i = 0; i < mainFParent.allData.grid.length; i++) {
            for (int j = 0; j < mainFParent.allData.grid[0].length; j++) {
//                            System.out.println("max x val: "+((myParent.allData.grid[i][j].max_x_val-myParent.allData.myScale.center_x)*myParent.allData.myScale.scale));
//                            System.out.println("min x val: "+((myParent.allData.grid[i][j].min_x_val-myParent.allData.myScale.center_x)*myParent.allData.myScale.scale));
//                            System.out.println("max y val: "+((myParent.allData.grid[i][j].max_y_val-myParent.allData.myScale.center_y)*myParent.allData.myScale.scale));
//                            System.out.println("min y val: "+((myParent.allData.grid[i][j].min_y_val-myParent.allData.myScale.center_y)*myParent.allData.myScale.scale));
//                float max_x = (float) ((mainFParent.allData.grid[i][j].max_x_val - (mainFParent.allData.myScale.center_x + mainFParent.allData.myScale.x_position)) * mainFParent.allData.myScale.scale);
//                float min_x = (float) ((mainFParent.allData.grid[i][j].min_x_val - (mainFParent.allData.myScale.center_x + mainFParent.allData.myScale.x_position)) * mainFParent.allData.myScale.scale);
//                float max_y = (float) ((mainFParent.allData.grid[i][j].max_y_val - (mainFParent.allData.myScale.center_y + mainFParent.allData.myScale.y_position)) * mainFParent.allData.myScale.scale);
//                float min_y = (float) ((mainFParent.allData.grid[i][j].min_y_val - (mainFParent.allData.myScale.center_y + mainFParent.allData.myScale.y_position)) * mainFParent.allData.myScale.scale);
//                            System.out.println("max x: "+max_x);
//                            System.out.println("min x: "+min_x);
//                            System.out.println("max y: "+max_y);
//                            System.out.println("min y: "+min_y);
                if (collisionPositiony < mainFParent.allData.grid[i][j].max_y_val && collisionPositiony > mainFParent.allData.grid[i][j].min_y_val && collisionPositionx < mainFParent.allData.grid[i][j].max_x_val && collisionPositionx > mainFParent.allData.grid[i][j].min_x_val) {
                    if (mainFParent.allData.grid[i][j].myNodes.length > 0) {
                        isValidCollition = true;
//                                System.out.println("grid x: "+i);
//                                System.out.println("grid y: "+j);
                        outputGrid = mainFParent.allData.grid[i][j];
                        break;
                    }
                }
            }
            if (isValidCollition == true) {
                break;
            }
        }
        LocationNode nearestNode = null;
        if (isValidCollition == true) {
            double leastDistance = Double.POSITIVE_INFINITY;
            nearestNode = outputGrid.myNodes[0];
            for (int i = 0; i < outputGrid.myNodes.length; i++) {
                //System.out.println(outputGrid.myNodes[i]);//WARNING, NULL POINTER SPOTTED, A GRID HAS A NULL LOCATIONNODE
                if (outputGrid.myNodes[i] != null) {
                    double dist = Math.sqrt(Math.pow(collisionPositionx - outputGrid.myNodes[i].lat, 2) + Math.pow(collisionPositiony - outputGrid.myNodes[i].lon, 2));
                    if (dist < leastDistance) {
                        nearestNode = outputGrid.myNodes[i];
                        leastDistance = dist;
                    }
                }
            }
        }
        return nearestNode;
    }

    public class ParallelRouting extends ParallelProcessor {

        public ArrayList<PatternsRecordProcessed> records;
        GISLocationDialog myParent;
        double myData[];
        int myThreadIndex;

        public ParallelRouting(int threadIndex, GISLocationDialog parent, double[] data, int startIndex, int endIndex, int trafficLayerIndex, LocationNode home, ArrayList<LocationNodeSafegraph> shopMergedLocations) {
            super(parent, data, startIndex, endIndex);
            records = new ArrayList();
            myThreadIndex = threadIndex;
            myParent = parent;
            myData = data;
            myThread = new Thread(new Runnable() {
                @Override
                public void run() {
                    for (int h = startIndex; h < endIndex; h++) {
//                                    if (h != shopGroupIndex) {
                        Routing routingToOthers = new Routing(mainFParent.allData, trafficLayerIndex, threadIndex);
                        routingToOthers.findPath(home, shopMergedLocations.get(h).node);
                        myData[h] = routingToOthers.pathDistance;
//                                    }
                    }
                }
            });
        }
    }

    public class ParallelLocationNodeCBGIdConnector extends ParallelProcessor {

        public ArrayList<PatternsRecordProcessed> records;
        GISLocationDialog myParent;
        Long myData[];
        int myThreadIndex;

        public ParallelLocationNodeCBGIdConnector(int threadIndex, GISLocationDialog parent, Long cBGForNodes[], int startIndex, int endIndex) {
            super(parent, cBGForNodes, startIndex, endIndex);
            records = new ArrayList();
            myThreadIndex = threadIndex;
            myParent = parent;
            myData = cBGForNodes;
            myThread = new Thread(new Runnable() {
                @Override
                public void run() {

//                    int counter = 0;
                    boolean isCBGFound = false;
                    for (int u = startIndex; u < endIndex; u++) {
                        isCBGFound = false;
                        for (int i = 0; i < myParent.myParent.mainModel.allGISData.countries.size(); i++) {
                            for (int j = 0; j < myParent.myParent.mainModel.allGISData.countries.get(i).states.size(); j++) {
                                for (int k = 0; k < myParent.myParent.mainModel.allGISData.countries.get(i).states.get(j).counties.size(); k++) {
                                    for (int m = 0; m < myParent.myParent.mainModel.allGISData.countries.get(i).states.get(j).counties.get(k).censusTracts.size(); m++) {
                                        for (int v = 0; v < myParent.myParent.mainModel.allGISData.countries.get(i).states.get(j).counties.get(k).censusTracts.get(m).censusBlocks.size(); v++) {
                                            for (int y = 0; y < myParent.myParent.mainModel.allGISData.countries.get(i).states.get(j).counties.get(k).censusTracts.get(m).censusBlocks.get(v).shape.size(); y++) {
                                                GeometryFactory geomFactory = new GeometryFactory();
                                                Point point = geomFactory.createPoint(new Coordinate(mainFParent.allData.all_Nodes[u].lon, mainFParent.allData.all_Nodes[u].lat));
                                                if (myParent.myParent.mainModel.allGISData.countries.get(i).states.get(j).counties.get(k).censusTracts.get(m).censusBlocks.get(v).shape.get(y).covers(point) == true) {
                                                    if (myParent.myParent.mainModel.allGISData.isInScope(myParent.myParent.mainModel.ABM.studyScopeGeography, myParent.myParent.mainModel.allGISData.countries.get(i).states.get(j).counties.get(k).censusTracts.get(m).censusBlocks.get(v)) == true) {
                                                        myData[u] = myParent.myParent.mainModel.allGISData.countries.get(i).states.get(j).counties.get(k).censusTracts.get(m).censusBlocks.get(v).id;
                                                        isCBGFound = true;
                                                        break;
                                                    } else {
                                                        myData[u] = Long.valueOf(-1);
                                                        isCBGFound = true;
                                                        break;
                                                    }
                                                    //censusBlockGroupsEncounteredList.add(myParent.myParent.mainModel.allGISData.countries.get(i).states.get(j).counties.get(k).censusTracts.get(m).censusBlocks.get(v).id);

                                                }
                                            }
                                            if (isCBGFound == true) {
                                                break;
                                            }
                                        }
                                        if (isCBGFound == true) {
                                            break;
                                        }
                                    }
                                    if (isCBGFound == true) {
                                        break;
                                    }
                                }
                                if (isCBGFound == true) {
                                    break;
                                }
                            }
                            if (isCBGFound == true) {
                                break;
                            }
                        }
                        if (isCBGFound == false) {
                            System.out.println("SEVERE PROBLEM! LOCATION NODE HAS NOT CBG!");
                        }
//                        System.out.println(counter);
//                        counter = counter + 1;
                    }
                }
            });
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton13;
    private javax.swing.JButton jButton14;
    private javax.swing.JButton jButton15;
    private javax.swing.JButton jButton16;
    private javax.swing.JButton jButton17;
    private javax.swing.JButton jButton18;
    private javax.swing.JButton jButton19;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton20;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    // End of variables declaration//GEN-END:variables
}
