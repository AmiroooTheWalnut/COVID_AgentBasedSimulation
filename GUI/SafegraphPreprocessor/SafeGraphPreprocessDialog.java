/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package COVID_AgentBasedSimulation.GUI.SafegraphPreprocessor;

import COVID_AgentBasedSimulation.GUI.MainFrame;
import COVID_AgentBasedSimulation.GUI.SafegraphPreprocessor.ManualLoadPlacesDialog;
import COVID_AgentBasedSimulation.GUI.SafegraphPreprocessor.ManualLoadPatternsPlacesDialog;
import COVID_AgentBasedSimulation.GUI.SafegraphPreprocessor.ManualLoadPatternsDialog;
import COVID_AgentBasedSimulation.GUI.SafegraphPreprocessor.ManualCompressPlacesDialog;
import COVID_AgentBasedSimulation.GUI.SafegraphPreprocessor.ManualCompressPatternsDialog;
import COVID_AgentBasedSimulation.Model.Data.Safegraph.AllPatterns;
import COVID_AgentBasedSimulation.Model.Data.Safegraph.AllSafegraphPlaces;
import COVID_AgentBasedSimulation.Model.Data.Safegraph.Patterns;
import COVID_AgentBasedSimulation.Model.Data.Safegraph.Safegraph;
import COVID_AgentBasedSimulation.Model.Data.Safegraph.SafegraphPlaces;
import COVID_AgentBasedSimulation.Model.MainModel;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 *
 * @author Amir Mohammad Esmaieeli Sikaroudi
 */
public class SafeGraphPreprocessDialog extends javax.swing.JDialog {

    public MainFrame myParent;
    public MainModel mainModel;

    public String[] patternsList;

    /**
     * Creates new form SafeGraphPreprocessDialog
     */
    public SafeGraphPreprocessDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        myParent = (MainFrame) parent;
        mainModel = myParent.mainModel;

        refreshYearMonthList();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jButton18 = new javax.swing.JButton();
        jButton19 = new javax.swing.JButton();
        jButton17 = new javax.swing.JButton();
        jCheckBox1 = new javax.swing.JCheckBox();
        jPanel1 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        jPanel9 = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList2 = new javax.swing.JList<>();
        jPanel11 = new javax.swing.JPanel();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jPanel13 = new javax.swing.JPanel();
        jButton10 = new javax.swing.JButton();
        jSpinner1 = new javax.swing.JSpinner();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jPanel6 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jButton5 = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jList5 = new javax.swing.JList<>();
        jPanel12 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jList3 = new javax.swing.JList<>();
        jButton11 = new javax.swing.JButton();

        jLabel2.setText("jLabel2");

        jLabel1.setText("jLabel1");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jButton18.setText("Load pattern places orig");
        jButton18.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton18ActionPerformed(evt);
            }
        });

        jButton19.setText("Load pattern places study");
        jButton19.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton19ActionPerformed(evt);
            }
        });

        jButton17.setText("Save restricted area");
        jButton17.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton17ActionPerformed(evt);
            }
        });

        jCheckBox1.setSelected(true);
        jCheckBox1.setText("Manual");

        jPanel1.setLayout(new java.awt.GridLayout(1, 0));

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder("Patterns"));

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Process and Compress"));

        jButton1.setText("Run manual");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Run automatically");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Processed data"));

        jButton3.setText("Manual load");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Auto-load");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton3)
                    .addComponent(jButton4))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton4)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Loaded patterns"));

        jList1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        jScrollPane1.setViewportView(jList1);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 118, Short.MAX_VALUE))
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1.add(jPanel8);

        jPanel9.setBorder(javax.swing.BorderFactory.createTitledBorder("Safegraph Places"));

        jPanel10.setBorder(javax.swing.BorderFactory.createTitledBorder("Process and Compress"));

        jButton6.setText("Run manual");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setText("Run automatically");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton6)
                    .addComponent(jButton7))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton7)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Loaded core places"));

        jList2.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        jScrollPane2.setViewportView(jList2);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 362, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 273, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel11.setBorder(javax.swing.BorderFactory.createTitledBorder("Processed data"));

        jButton8.setText("Manual load");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jButton9.setText("Auto-load");

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton8)
                    .addComponent(jButton9))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton9)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel13.setBorder(javax.swing.BorderFactory.createTitledBorder("Building area"));

        jButton10.setText("Building area");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        jSpinner1.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));

        jLabel5.setText("Number of samples:");

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(5);
        jTextArea1.setText("0 means no sampling and a number more than places means no sampling");
        jScrollPane4.setViewportView(jTextArea1);

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton10)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jSpinner1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4))
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addComponent(jScrollPane4)
        );

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(118, Short.MAX_VALUE))
            .addComponent(jPanel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1.add(jPanel9);

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("Generate travel matrix"));

        jLabel3.setText("Scope:");

        jLabel4.setText("Empty");

        jButton5.setText("Generate travel matrix");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder("Years and months"));

        jScrollPane5.setViewportView(jList5);

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 382, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 304, Short.MAX_VALUE)
        );

        jPanel12.setBorder(javax.swing.BorderFactory.createTitledBorder("Granuality"));

        jList3.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "country", "state", "county", "censustract", "censusblockgroup" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jList3.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane3.setViewportView(jList3);

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3)
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 98, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jButton5))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton5)
                .addContainerGap())
        );

        jPanel1.add(jPanel6);

        jButton11.setText("Report NAICS");
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton18)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton19)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton17)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox1)
                .addGap(18, 18, 18)
                .addComponent(jButton11)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton17)
                    .addComponent(jCheckBox1)
                    .addComponent(jButton18)
                    .addComponent(jButton19)
                    .addComponent(jButton11))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        ManualCompressPatternsDialog manualCompressDialog = new ManualCompressPatternsDialog(myParent, false);
        manualCompressDialog.setVisible(true);
        manualCompressDialog.refreshList();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        String patternsList[] = AllPatterns.detectAllPatterns("./datasets/Safegraph/FullData");
        for (int i = patternsList.length - 1; i > -1; i--) {
            Patterns patterns = new Patterns();
            patterns.preprocessMonthPatterns("./datasets/Safegraph/FullData/" + patternsList[i], patternsList[i], jCheckBox1.isSelected(), myParent.numProcessors);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        ManualLoadPatternsDialog manualLoadDialog = new ManualLoadPatternsDialog(myParent, false, this);
        manualLoadDialog.setVisible(true);
        manualLoadDialog.refreshList();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        ManualCompressPlacesDialog manualCompressDialog = new ManualCompressPlacesDialog(myParent, false);
        manualCompressDialog.setVisible(true);
        manualCompressDialog.refreshList();
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        String[] placesList = AllSafegraphPlaces.detectAllPlaces("./datasets/Safegraph/FullData");
        for (int i = placesList.length - 1; i > -1; i--) {
            SafegraphPlaces safegraphPlaces = new SafegraphPlaces();
            safegraphPlaces.preprocessMonthCorePlaces("./datasets/Safegraph/FullData/" + placesList[i], placesList[i], jCheckBox1.isSelected(), myParent.numProcessors);
            //            Safegraph.saveSafegraphPlacesKryo("./datasets/Safegraph/FullData/" + placesList[i] + "/processedData", safegraphPlaces);
        }
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        ManualLoadPlacesDialog manualLoadDialog = new ManualLoadPlacesDialog(myParent, false, this);
        manualLoadDialog.setVisible(true);
        manualLoadDialog.refreshList();
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton18ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton18ActionPerformed
        ManualLoadPatternsPlacesDialog manualLoadPatternsPlaces = new ManualLoadPatternsPlacesDialog(myParent, false, "FullData", this);
        manualLoadPatternsPlaces.setVisible(true);
        manualLoadPatternsPlaces.refreshList();
    }//GEN-LAST:event_jButton18ActionPerformed

    private void jButton19ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton19ActionPerformed
        ManualLoadPatternsPlacesDialog manualLoadPatternsPlaces = new ManualLoadPatternsPlacesDialog(myParent, false, mainModel.ABM.studyScope, this);
        manualLoadPatternsPlaces.setVisible(true);
        manualLoadPatternsPlaces.refreshList();
    }//GEN-LAST:event_jButton19ActionPerformed

    private void jButton17ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton17ActionPerformed
        if (jCheckBox1.isSelected()) {
            String directoryPath = "./datasets/Safegraph/" + mainModel.ABM.studyScope;
            File directory = new File(directoryPath);
            if (!directory.exists()) {
                directory.mkdir();
            }
            if (jList1.getSelectedIndex() > -1) {
                directoryPath = "./datasets/Safegraph/" + mainModel.ABM.studyScope + "/" + jList1.getSelectedValue();
                directory = new File(directoryPath);
                if (!directory.exists()) {
                    directory.mkdir();
                }
                Patterns patterns = Safegraph.getSubPattern(mainModel.ABM.studyScopeGeography, mainModel.safegraph.allPatterns.monthlyPatternsList.get(jList1.getSelectedIndex()));
                Safegraph.savePatternsKryo(directoryPath + "/processedData", patterns);

                if (jList2.getSelectedIndex() > -1) {
                    directoryPath = "./datasets/Safegraph/" + mainModel.ABM.studyScope + "/" + jList2.getSelectedValue();
                    directory = new File(directoryPath);
                    if (!directory.exists()) {
                        directory.mkdir();
                    }
                    SafegraphPlaces safegraphPlaces = Safegraph.getSubPlace(mainModel.ABM.studyScopeGeography, mainModel.safegraph.allSafegraphPlaces.monthlySafegraphPlacesList.get(jList2.getSelectedIndex()));
                    Safegraph.saveSafegraphPlacesKryo(directoryPath + "/processedData_withArea", safegraphPlaces);
                }
            }
        } else {
            String directoryPath = "./datasets/Safegraph/" + mainModel.ABM.studyScope;
            File directory = new File(directoryPath);
            if (!directory.exists()) {
                directory.mkdir();
            }
            String[] patternsList = AllPatterns.detectAllPatterns("./datasets/Safegraph/FullData");
            for (int i = 0; i < patternsList.length; i++) {
                myParent.mainModel.safegraph.clearPatternsPlaces();
                mainModel.safegraph.loadPatternsPlacesSet(patternsList[i].split("_")[1] + "_" + patternsList[i].split("_")[2], myParent.mainModel.allGISData, "FullData", true, myParent.numProcessors);

                if (mainModel.safegraph.allPatterns.monthlyPatternsList != null && mainModel.safegraph.allSafegraphPlaces.monthlySafegraphPlacesList != null) {
                    if (mainModel.safegraph.allPatterns.monthlyPatternsList.size() > 0 && mainModel.safegraph.allPatterns.monthlyPatternsList.size() > 0) {
                        directoryPath = "./datasets/Safegraph/" + mainModel.ABM.studyScope + "/" + patternsList[i];
                        directory = new File(directoryPath);
                        if (!directory.exists()) {
                            directory.mkdir();
                        }

                        Patterns patterns = Safegraph.getSubPattern(mainModel.ABM.studyScopeGeography, mainModel.safegraph.allPatterns.monthlyPatternsList.get(0));
                        Safegraph.savePatternsKryo(directoryPath + "/processedData", patterns);

                        SafegraphPlaces safegraphPlaces = Safegraph.getSubPlace(mainModel.ABM.studyScopeGeography, mainModel.safegraph.allSafegraphPlaces.monthlySafegraphPlacesList.get(0));
                        Safegraph.saveSafegraphPlacesKryo(directoryPath + "/processedData", safegraphPlaces);
                    }
                }

                myParent.mainModel.safegraph.clearPatternsPlaces();
            }
        }
    }//GEN-LAST:event_jButton17ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        ArrayList<String> years = new ArrayList();
        ArrayList<ArrayList<String>> months = new ArrayList();
        List<String> selectedValues = jList5.getSelectedValuesList();
        for (int i = 0; i < selectedValues.size(); i++) {
            String[] splitted = selectedValues.get(i).split("_");

            boolean isYearUnique = true;
            int yearIndex = -1;
            for (int j = 0; j < years.size(); j++) {
                if (splitted[1].equals(years.get(j))) {
                    isYearUnique = false;
                    yearIndex = j;
                }
            }
            if (isYearUnique == true) {
                years.add(splitted[1]);
                ArrayList yearMonths = new ArrayList();
                yearMonths.add(splitted[2]);
                months.add(yearMonths);
            } else {
                boolean isMonthUnique = true;
                //int monthIndex = -1;
                for (int j = 0; j < months.get(yearIndex).size(); j++) {
                    if (splitted[2].equals(months.get(yearIndex).get(j))) {
                        isMonthUnique = false;
                        //monthIndex = j;
                    }
                }
                if (isMonthUnique == true) {
                    months.get(yearIndex).add(splitted[2]);
                } else {

                }
            }
        }

        String yearsArray[] = new String[years.size()];
        for (int i = 0; i < years.size(); i++) {
            yearsArray[i] = years.get(i);
        }

        String monthsArray[][] = new String[years.size()][];
        for (int i = 0; i < months.size(); i++) {
            monthsArray[i] = new String[months.get(i).size()];
            for (int j = 0; j < months.get(i).size(); j++) {
                monthsArray[i][j] = months.get(i).get(j);
            }
        }

        myParent.mainModel.safegraph.writeTravelMatrix(myParent.mainModel.ABM.studyScopeGeography, jList3.getSelectedValue(), yearsArray, monthsArray, myParent.mainModel.allGISData, true, myParent.numProcessors);
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        if (jList2.getSelectedIndex() != -1) {
            SafegraphPlaces.connectToOSMBuildingAreaLevels(mainModel.safegraph.allSafegraphPlaces.monthlySafegraphPlacesList.get(jList2.getSelectedIndex()).placesRecords, (int) jSpinner1.getValue());
            Safegraph.saveSafegraphPlacesKryo("./datasets/Safegraph/FullData/" + jList2.getSelectedValue() + "/processedData_withArea", mainModel.safegraph.allSafegraphPlaces.monthlySafegraphPlacesList.get(jList2.getSelectedIndex()));
        }
    }//GEN-LAST:event_jButton10ActionPerformed

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        if (jList1.getSelectedIndex() > -1) {
            String businessNames[] = new String[]{"Agriculture", "Mining", "Utilities", "Construction", "Manufacturing", "WholesaleTrade", "RetailTrade", "TransportationWarehousing", "Information", "FinanceInsurance", "RealestateRentalLeasing", "ProfessionalScientificTechnicalServices", "ManagementCompaniesEnterprises", "AdministrativeSupportWasteManagementRemediationServices", "EducationalServices", "HealthCareSocialAssistance", "ArtsEntertainmentRecreation", "AccommodationFoodServices", "OtherServicesExceptPublicAdministration", "PublicAdministration","Extra: Food and groceries","Extra: Religious organizations","Extra: Schools"};
            int businessTravelsCount[] = new int[businessNames.length];
            for (int i = 0; i < myParent.mainModel.safegraph.allPatterns.monthlyPatternsList.get(jList1.getSelectedIndex()).patternRecords.size(); i++) {
//                System.out.println(myParent.mainModel.safegraph.allPatterns.monthlyPatternsList.get(jList1.getSelectedIndex()).patternRecords.get(i).place.naics_code);
                if (isAgriculture(myParent.mainModel.safegraph.allPatterns.monthlyPatternsList.get(jList1.getSelectedIndex()).patternRecords.get(i).place.naics_code) == true) {
                    businessTravelsCount[0] += myParent.mainModel.safegraph.allPatterns.monthlyPatternsList.get(jList1.getSelectedIndex()).patternRecords.get(i).raw_visit_counts;
//                    System.out.println("Agriculture: "+businessTravelsCount[0]);
                } else if (isMining(myParent.mainModel.safegraph.allPatterns.monthlyPatternsList.get(jList1.getSelectedIndex()).patternRecords.get(i).place.naics_code) == true) {
                    businessTravelsCount[1] += myParent.mainModel.safegraph.allPatterns.monthlyPatternsList.get(jList1.getSelectedIndex()).patternRecords.get(i).raw_visit_counts;
//                    System.out.println("Mining: "+businessTravelsCount[1]);
                } else if (isUtilities(myParent.mainModel.safegraph.allPatterns.monthlyPatternsList.get(jList1.getSelectedIndex()).patternRecords.get(i).place.naics_code) == true) {
                    businessTravelsCount[2] += myParent.mainModel.safegraph.allPatterns.monthlyPatternsList.get(jList1.getSelectedIndex()).patternRecords.get(i).raw_visit_counts;
//                    System.out.println("Utilities: "+businessTravelsCount[2]);
                } else if (isConstruction(myParent.mainModel.safegraph.allPatterns.monthlyPatternsList.get(jList1.getSelectedIndex()).patternRecords.get(i).place.naics_code) == true) {
                    businessTravelsCount[3] += myParent.mainModel.safegraph.allPatterns.monthlyPatternsList.get(jList1.getSelectedIndex()).patternRecords.get(i).raw_visit_counts;
//                    System.out.println("Construction: "+businessTravelsCount[3]);
                } else if (isManufacturing(myParent.mainModel.safegraph.allPatterns.monthlyPatternsList.get(jList1.getSelectedIndex()).patternRecords.get(i).place.naics_code) == true) {
                    businessTravelsCount[4] += myParent.mainModel.safegraph.allPatterns.monthlyPatternsList.get(jList1.getSelectedIndex()).patternRecords.get(i).raw_visit_counts;
//                    System.out.println("Manufacturing: "+businessTravelsCount[4]);
                } else if (isWholesaleTrade(myParent.mainModel.safegraph.allPatterns.monthlyPatternsList.get(jList1.getSelectedIndex()).patternRecords.get(i).place.naics_code) == true) {
                    businessTravelsCount[5] += myParent.mainModel.safegraph.allPatterns.monthlyPatternsList.get(jList1.getSelectedIndex()).patternRecords.get(i).raw_visit_counts;
//                    System.out.println("WholesaleTrade: "+businessTravelsCount[5]);
                } else if (isRetailTrade(myParent.mainModel.safegraph.allPatterns.monthlyPatternsList.get(jList1.getSelectedIndex()).patternRecords.get(i).place.naics_code) == true) {
                    businessTravelsCount[6] += myParent.mainModel.safegraph.allPatterns.monthlyPatternsList.get(jList1.getSelectedIndex()).patternRecords.get(i).raw_visit_counts;
//                    System.out.println("RetailTrade: "+businessTravelsCount[6]);
                } else if (isTransportationWarehousing(myParent.mainModel.safegraph.allPatterns.monthlyPatternsList.get(jList1.getSelectedIndex()).patternRecords.get(i).place.naics_code) == true) {
                    businessTravelsCount[7] += myParent.mainModel.safegraph.allPatterns.monthlyPatternsList.get(jList1.getSelectedIndex()).patternRecords.get(i).raw_visit_counts;
//                    System.out.println("TransportationWarehousing: "+businessTravelsCount[7]);
                } else if (isInformation(myParent.mainModel.safegraph.allPatterns.monthlyPatternsList.get(jList1.getSelectedIndex()).patternRecords.get(i).place.naics_code) == true) {
                    businessTravelsCount[8] += myParent.mainModel.safegraph.allPatterns.monthlyPatternsList.get(jList1.getSelectedIndex()).patternRecords.get(i).raw_visit_counts;
//                    System.out.println("Information: "+businessTravelsCount[8]);
                } else if (isFinanceInsurance(myParent.mainModel.safegraph.allPatterns.monthlyPatternsList.get(jList1.getSelectedIndex()).patternRecords.get(i).place.naics_code) == true) {
                    businessTravelsCount[9] += myParent.mainModel.safegraph.allPatterns.monthlyPatternsList.get(jList1.getSelectedIndex()).patternRecords.get(i).raw_visit_counts;
//                    System.out.println("FinanceInsurance: "+businessTravelsCount[9]);
                } else if (isRealestateRentalLeasing(myParent.mainModel.safegraph.allPatterns.monthlyPatternsList.get(jList1.getSelectedIndex()).patternRecords.get(i).place.naics_code) == true) {
                    businessTravelsCount[10] += myParent.mainModel.safegraph.allPatterns.monthlyPatternsList.get(jList1.getSelectedIndex()).patternRecords.get(i).raw_visit_counts;
//                    System.out.println("RealestateRentalLeasing: "+businessTravelsCount[10]);
                } else if (isProfessionalScientificTechnicalServices(myParent.mainModel.safegraph.allPatterns.monthlyPatternsList.get(jList1.getSelectedIndex()).patternRecords.get(i).place.naics_code) == true) {
                    businessTravelsCount[11] += myParent.mainModel.safegraph.allPatterns.monthlyPatternsList.get(jList1.getSelectedIndex()).patternRecords.get(i).raw_visit_counts;
//                    System.out.println("ProfessionalScientificTechnicalServices: "+businessTravelsCount[11]);
                } else if (isManagementCompaniesEnterprises(myParent.mainModel.safegraph.allPatterns.monthlyPatternsList.get(jList1.getSelectedIndex()).patternRecords.get(i).place.naics_code) == true) {
                    businessTravelsCount[12] += myParent.mainModel.safegraph.allPatterns.monthlyPatternsList.get(jList1.getSelectedIndex()).patternRecords.get(i).raw_visit_counts;
//                    System.out.println("ManagementCompaniesEnterprises: "+businessTravelsCount[12]);
                } else if (isAdministrativeSupportWasteManagementRemediationServices(myParent.mainModel.safegraph.allPatterns.monthlyPatternsList.get(jList1.getSelectedIndex()).patternRecords.get(i).place.naics_code) == true) {
                    businessTravelsCount[13] += myParent.mainModel.safegraph.allPatterns.monthlyPatternsList.get(jList1.getSelectedIndex()).patternRecords.get(i).raw_visit_counts;
//                    System.out.println("AdministrativeSupportWasteManagementRemediationServices: "+businessTravelsCount[13]);
                } else if (isEducationalServices(myParent.mainModel.safegraph.allPatterns.monthlyPatternsList.get(jList1.getSelectedIndex()).patternRecords.get(i).place.naics_code) == true) {
                    businessTravelsCount[14] += myParent.mainModel.safegraph.allPatterns.monthlyPatternsList.get(jList1.getSelectedIndex()).patternRecords.get(i).raw_visit_counts;
//                    System.out.println("EducationalServices: "+businessTravelsCount[14]);
                } else if (isHealthCareSocialAssistance(myParent.mainModel.safegraph.allPatterns.monthlyPatternsList.get(jList1.getSelectedIndex()).patternRecords.get(i).place.naics_code) == true) {
                    businessTravelsCount[15] += myParent.mainModel.safegraph.allPatterns.monthlyPatternsList.get(jList1.getSelectedIndex()).patternRecords.get(i).raw_visit_counts;
//                    System.out.println("HealthCareSocialAssistance: "+businessTravelsCount[15]);
                } else if (isArtsEntertainmentRecreation(myParent.mainModel.safegraph.allPatterns.monthlyPatternsList.get(jList1.getSelectedIndex()).patternRecords.get(i).place.naics_code) == true) {
                    businessTravelsCount[16] += myParent.mainModel.safegraph.allPatterns.monthlyPatternsList.get(jList1.getSelectedIndex()).patternRecords.get(i).raw_visit_counts;
//                    System.out.println("ArtsEntertainmentRecreation: "+businessTravelsCount[16]);
                } else if (isAccommodationFoodServices(myParent.mainModel.safegraph.allPatterns.monthlyPatternsList.get(jList1.getSelectedIndex()).patternRecords.get(i).place.naics_code) == true) {
                    businessTravelsCount[17] += myParent.mainModel.safegraph.allPatterns.monthlyPatternsList.get(jList1.getSelectedIndex()).patternRecords.get(i).raw_visit_counts;
//                    System.out.println("AccommodationFoodServices: "+businessTravelsCount[17]);
                } else if (isOtherServicesExceptPublicAdministration(myParent.mainModel.safegraph.allPatterns.monthlyPatternsList.get(jList1.getSelectedIndex()).patternRecords.get(i).place.naics_code) == true) {
                    businessTravelsCount[18] += myParent.mainModel.safegraph.allPatterns.monthlyPatternsList.get(jList1.getSelectedIndex()).patternRecords.get(i).raw_visit_counts;
//                    System.out.println("OtherServicesExceptPublicAdministration: "+businessTravelsCount[18]);
                } else if (isPublicAdministration(myParent.mainModel.safegraph.allPatterns.monthlyPatternsList.get(jList1.getSelectedIndex()).patternRecords.get(i).place.naics_code) == true) {
                    businessTravelsCount[19] += myParent.mainModel.safegraph.allPatterns.monthlyPatternsList.get(jList1.getSelectedIndex()).patternRecords.get(i).raw_visit_counts;
//                    System.out.println("PublicAdministration: "+businessTravelsCount[19]);
                }
                if (isFoodAndGrocery(myParent.mainModel.safegraph.allPatterns.monthlyPatternsList.get(jList1.getSelectedIndex()).patternRecords.get(i).place.naics_code) == true) {
                    businessTravelsCount[20] += myParent.mainModel.safegraph.allPatterns.monthlyPatternsList.get(jList1.getSelectedIndex()).patternRecords.get(i).raw_visit_counts;
//                    System.out.println("PublicAdministration: "+businessTravelsCount[19]);
                } else if (isReligiousOrganization(myParent.mainModel.safegraph.allPatterns.monthlyPatternsList.get(jList1.getSelectedIndex()).patternRecords.get(i).place.naics_code) == true) {
                    businessTravelsCount[21] += myParent.mainModel.safegraph.allPatterns.monthlyPatternsList.get(jList1.getSelectedIndex()).patternRecords.get(i).raw_visit_counts;
//                    System.out.println("PublicAdministration: "+businessTravelsCount[19]);
                } else if (isEducationalServices(myParent.mainModel.safegraph.allPatterns.monthlyPatternsList.get(jList1.getSelectedIndex()).patternRecords.get(i).place.naics_code) == true) {
                    businessTravelsCount[22] += myParent.mainModel.safegraph.allPatterns.monthlyPatternsList.get(jList1.getSelectedIndex()).patternRecords.get(i).raw_visit_counts;
//                    System.out.println("PublicAdministration: "+businessTravelsCount[19]);
                }
                
            }
            try {
                String header = new String();
                for (int i = 0; i < businessNames.length; i++) {
                    header += businessNames[i];
                    if (i != businessNames.length - 1) {
                        header += ",";
                    }
                }
                header += "\n";
                String data = new String();
                for (int i = 0; i < businessTravelsCount.length; i++) {
                    data += String.valueOf(businessTravelsCount[i]);
                    if (i != businessTravelsCount.length - 1) {
                        data += ",";
                    }
                }
                data += "\n";
                File f1 = new File("./"+jList1.getSelectedValue()+"_NAICSReport.csv");
                if (!f1.exists()) {
                    f1.createNewFile();
                }

                FileWriter fileWritter = new FileWriter(f1.getName(), false);
                BufferedWriter bw = new BufferedWriter(fileWritter);
                bw.write(header);
                bw.write(data);
                bw.close();
                System.out.println("Done");
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_jButton11ActionPerformed

    public boolean isReligiousOrganization(int naicsCode) {
        String naicsString = String.valueOf(naicsCode);
        if (naicsString.startsWith("8131")) {
            return true;
        }
        return false;
    }
    
    public boolean isFoodAndGrocery(int naicsCode) {
        String naicsString = String.valueOf(naicsCode);
        if ((naicsString.startsWith("44") || naicsString.startsWith("45")) && !naicsString.startsWith("4411") && !naicsString.startsWith("4412") && !naicsString.startsWith("4413")) {
            return true;
        }
        return false;
    }
    
    public boolean isAgriculture(int naicsCode) {
        String naicsString = String.valueOf(naicsCode);
        if (naicsString.startsWith("11")) {
            return true;
        }
        return false;
    }

    public boolean isMining(int naicsCode) {
        String naicsString = String.valueOf(naicsCode);
        if (naicsString.startsWith("21")) {
            return true;
        }
        return false;
    }

    public boolean isUtilities(int naicsCode) {
        String naicsString = String.valueOf(naicsCode);
        if (naicsString.startsWith("22")) {
            return true;
        }
        return false;
    }

    public boolean isConstruction(int naicsCode) {
        String naicsString = String.valueOf(naicsCode);
        if (naicsString.startsWith("23")) {
            return true;
        }
        return false;
    }

    public boolean isManufacturing(int naicsCode) {
        String naicsString = String.valueOf(naicsCode);
        if (naicsString.startsWith("31") || naicsString.startsWith("32") || naicsString.startsWith("33")) {
            return true;
        }
        return false;
    }

    public boolean isWholesaleTrade(int naicsCode) {
        String naicsString = String.valueOf(naicsCode);
        if (naicsString.startsWith("42")) {
            return true;
        }
        return false;
    }

    public boolean isRetailTrade(int naicsCode) {
        String naicsString = String.valueOf(naicsCode);
        if (naicsString.startsWith("44") || naicsString.startsWith("45")) {
            return true;
        }
        return false;
    }

    public boolean isTransportationWarehousing(int naicsCode) {
        String naicsString = String.valueOf(naicsCode);
        if (naicsString.startsWith("48") || naicsString.startsWith("49")) {
            return true;
        }
        return false;
    }

    public boolean isInformation(int naicsCode) {
        String naicsString = String.valueOf(naicsCode);
        if (naicsString.startsWith("51")) {
            return true;
        }
        return false;
    }

    public boolean isFinanceInsurance(int naicsCode) {
        String naicsString = String.valueOf(naicsCode);
        if (naicsString.startsWith("52")) {
            return true;
        }
        return false;
    }

    public boolean isRealestateRentalLeasing(int naicsCode) {
        String naicsString = String.valueOf(naicsCode);
        if (naicsString.startsWith("53")) {
            return true;
        }
        return false;
    }

    public boolean isProfessionalScientificTechnicalServices(int naicsCode) {
        String naicsString = String.valueOf(naicsCode);
        if (naicsString.startsWith("54")) {
            return true;
        }
        return false;
    }

    public boolean isManagementCompaniesEnterprises(int naicsCode) {
        String naicsString = String.valueOf(naicsCode);
        if (naicsString.startsWith("55")) {
            return true;
        }
        return false;
    }

    public boolean isAdministrativeSupportWasteManagementRemediationServices(int naicsCode) {
        String naicsString = String.valueOf(naicsCode);
        if (naicsString.startsWith("56")) {
            return true;
        }
        return false;
    }

    public boolean isEducationalServices(int naicsCode) {
        String naicsString = String.valueOf(naicsCode);
        if (naicsString.startsWith("61")) {
            return true;
        }
        return false;
    }

    public boolean isHealthCareSocialAssistance(int naicsCode) {
        String naicsString = String.valueOf(naicsCode);
        if (naicsString.startsWith("62")) {
            return true;
        }
        return false;
    }

    public boolean isArtsEntertainmentRecreation(int naicsCode) {
        String naicsString = String.valueOf(naicsCode);
        if (naicsString.startsWith("71")) {
            return true;
        }
        return false;
    }

    public boolean isAccommodationFoodServices(int naicsCode) {
        String naicsString = String.valueOf(naicsCode);
        if (naicsString.startsWith("72")) {
            return true;
        }
        return false;
    }

    public boolean isOtherServicesExceptPublicAdministration(int naicsCode) {
        String naicsString = String.valueOf(naicsCode);
        if (naicsString.startsWith("81")) {
            return true;
        }
        return false;
    }

    public boolean isPublicAdministration(int naicsCode) {
        String naicsString = String.valueOf(naicsCode);
        if (naicsString.startsWith("92")) {
            return true;
        }
        return false;
    }

    public void refreshPatternsList() {
        jList1.setModel(new javax.swing.AbstractListModel() {
            @Override
            public int getSize() {
                return mainModel.safegraph.allPatterns.monthlyPatternsList.size();
            }

            @Override
            public Object getElementAt(int index) {
                return mainModel.safegraph.allPatterns.monthlyPatternsList.get(index).name;
            }
        });
    }

    public void refreshPlacesList() {
        jList2.setModel(new javax.swing.AbstractListModel() {
            @Override
            public int getSize() {
                return mainModel.safegraph.allSafegraphPlaces.monthlySafegraphPlacesList.size();
            }

            @Override
            public Object getElementAt(int index) {
                return mainModel.safegraph.allSafegraphPlaces.monthlySafegraphPlacesList.get(index).name;
            }
        });
    }

    public void refreshYearMonthList() {
        patternsList = AllPatterns.detectAllPatterns("./datasets/Safegraph/FullData");
        jList5.setModel(new javax.swing.AbstractListModel() {
            @Override
            public int getSize() {
                return patternsList.length;
            }

            @Override
            public Object getElementAt(int index) {
                return patternsList[index];
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton17;
    private javax.swing.JButton jButton18;
    private javax.swing.JButton jButton19;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JList<String> jList1;
    private javax.swing.JList<String> jList2;
    private javax.swing.JList<String> jList3;
    private javax.swing.JList<String> jList5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}
