/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package COVID_AgentBasedSimulation.GUI;

import com.opencsv.CSVReader;
import com.opencsv.CSVWriter;
import com.opencsv.exceptions.CsvException;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.FilenameFilter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author user
 */
public class PrepareReport extends javax.swing.JDialog {

    MainFrame myParent;

    String[] directories;
    String directoryPath;

    /**
     * Creates new form PrepareReport
     */
    public PrepareReport(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();

        myParent = (MainFrame) parent;

        updateProjects();
    }

    public void updateProjects() {
        String filePath = myParent.mainModel.ABM.filePath;
        directoryPath = "projects" + File.separator + filePath.substring(filePath.lastIndexOf(File.separator) + 1, filePath.length());
        File directory = new File(directoryPath);
        if (!directory.exists()) {
            directory.mkdirs();
            return;
        }

        directories = directory.list(new FilenameFilter() {
            @Override
            public boolean accept(File current, String name) {
                return new File(current, name).isDirectory();
            }
        });
        jList1.setModel(new javax.swing.AbstractListModel() {
            @Override
            public int getSize() {
                return directories.length;
            }

            @Override
            public Object getElementAt(int index) {
                return directories[index];
            }
        });
        HashMap<String, Integer> tessellations = new HashMap();
        HashMap<String, Integer> numAgents = new HashMap();
        for (int i = 0; i < directories.length; i++) {
            String[] numTess = getNumTess(directories[i]);
            tessellations.put(numTess[1], 1);
            numAgents.put(numTess[0], 1);
        }
        String[] tessellationsStrs = new String[tessellations.keySet().size()];
        int counter = 0;
        for (String key : tessellations.keySet()) {
            tessellationsStrs[counter] = key;
            counter = counter + 1;
        }
        String[] numAgentsStrs = new String[numAgents.keySet().size()];
        counter = 0;
        for (String key : numAgents.keySet()) {
            numAgentsStrs[counter] = key;
            counter = counter + 1;
        }
        jList2.setModel(new javax.swing.AbstractListModel() {
            @Override
            public int getSize() {
                return tessellationsStrs.length;
            }

            @Override
            public Object getElementAt(int index) {
                return tessellationsStrs[index];
            }
        });
        jList3.setModel(new javax.swing.AbstractListModel() {
            @Override
            public int getSize() {
                return numAgentsStrs.length;
            }

            @Override
            public Object getElementAt(int index) {
                return numAgentsStrs[index];
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList2 = new javax.swing.JList<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        jList3 = new javax.swing.JList<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jButton1.setText("Save");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jPanel3.setLayout(new java.awt.BorderLayout());

        jPanel2.setLayout(new java.awt.GridLayout(1, 3));

        jLabel1.setText("Runs");
        jPanel2.add(jLabel1);

        jLabel2.setText("Tessellation (make selection)");
        jPanel2.add(jLabel2);

        jLabel3.setText("Number of agents (make selection)");
        jPanel2.add(jLabel3);

        jPanel3.add(jPanel2, java.awt.BorderLayout.PAGE_START);

        jPanel1.setLayout(new java.awt.GridLayout(1, 3));

        jList1.setEnabled(false);
        jScrollPane1.setViewportView(jList1);

        jPanel1.add(jScrollPane1);

        jScrollPane2.setViewportView(jList2);

        jPanel1.add(jScrollPane2);

        jScrollPane3.setViewportView(jList3);

        jPanel1.add(jScrollPane3);

        jPanel3.add(jPanel1, java.awt.BorderLayout.CENTER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, 1011, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, 526, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String selectedTessellation = jList2.getSelectedValue();
        String selectedNumAgent = jList3.getSelectedValue();
        boolean isRealRead = false;
        ArrayList<ArrayList<String>> finalData = new ArrayList();
        for (int i = 0; i < directories.length; i++) {
            String[] numTess = getNumTess(directories[i]);
            if (selectedTessellation.equals(numTess[1])) {
                if (selectedNumAgent.equals(numTess[0])) {
                    try {
                        CSVReader csvReader = new CSVReader(new FileReader(directoryPath + File.separator + directories[i] + File.separator + "infectionReport.csv"));
                        List<String[]> list;
                        list = csvReader.readAll();
                        if (isRealRead == false) {
                            if (finalData.size() == 0) {
                                finalData.add(new ArrayList());
                            }
                        }
                        finalData.add(new ArrayList());
                        for (int m = 1; m < list.size(); m++) {
//                            for (int j = 0; j < list.get(m).length; j++) {
                            if (isRealRead == false) {
                                finalData.get(0).add(list.get(m)[6]);
                            }
                            finalData.get(finalData.size() - 1).add(list.get(m)[8]);
//                            }
                        }
                        isRealRead = true;
                        csvReader.close();
                    } catch (IOException ex) {
                        Logger.getLogger(PrepareReport.class.getName()).log(Level.SEVERE, null, ex);
                        System.out.println("TRAVEL DISTANCES FAILED TO READ");
                    } catch (CsvException ex) {
                        Logger.getLogger(PrepareReport.class.getName()).log(Level.SEVERE, null, ex);
                        System.out.println("TRAVEL DISTANCES FAILED TO READ");
                    }
                }
            }
        }
        ArrayList<String[]> finalDataConverted = new ArrayList();
        for (int i = 0; i < finalData.get(0).size(); i++) {
            String[] row = new String[finalData.size()];
            for (int j = 0; j < finalData.size(); j++) {
                row[j] = finalData.get(j).get(i);
            }
            finalDataConverted.add(row);
        }
        try {
            CSVWriter writer = new CSVWriter(new FileWriter(directoryPath + File.separator + selectedNumAgent + ".csv"));
            writer.writeAll(finalDataConverted);
            writer.close();
            System.out.println("SUMMARY SUCCESSFULLY WRITTEN");
        } catch (IOException ex) {
            Logger.getLogger(PrepareReport.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    public String[] getNumTess(String input) {
        String[] output = new String[2];
        String[] raw = input.split("_");
        for (int i = 0; i < raw.length; i++) {
            if (raw[i].equals("NumPeople")) {
                output[0] = raw[i + 1];
                output[1] = "";
                for (int j = i + 2; j < raw.length; j++) {
                    output[1] = output[1] + raw[j];
                }
                break;
            }

        }
        return output;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JList<String> jList1;
    private javax.swing.JList<String> jList2;
    private javax.swing.JList<String> jList3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    // End of variables declaration//GEN-END:variables
}
