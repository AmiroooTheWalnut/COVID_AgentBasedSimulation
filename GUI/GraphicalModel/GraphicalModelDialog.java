package COVID_AgentBasedSimulation.GUI.GraphicalModel;

import COVID_AgentBasedSimulation.GUI.MainFrame;
import COVID_AgentBasedSimulation.GUI.VoronoiGIS.GISLocationDialog;
import COVID_AgentBasedSimulation.Model.Data.Safegraph.AllPatterns;
import COVID_AgentBasedSimulation.Model.GraphicalModel.GraphicalModel;
import COVID_AgentBasedSimulation.Model.Structure.CensusBlockGroup;
import COVID_AgentBasedSimulation.Model.Structure.City;
import de.siegmar.fastcsv.writer.CsvWriter;
import java.io.File;
import java.io.IOException;
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author user
 */
public class GraphicalModelDialog extends javax.swing.JDialog {

    public MainFrame myParent;
    String[] patternsList;
    String loadScope;

    /**
     * Creates new form GraphicalModelDialog
     */
    public GraphicalModelDialog(java.awt.Frame parent, boolean modal, String passed_loadScope) {
        super(parent, modal);
        initComponents();
        myParent = (MainFrame) parent;
        loadScope = passed_loadScope;

        patternsList = AllPatterns.detectAllPatterns("./datasets/Safegraph/" + loadScope);
        jList1.setModel(new javax.swing.AbstractListModel() {
            @Override
            public int getSize() {
                return patternsList.length;
            }

            @Override
            public Object getElementAt(int index) {
                String[] strs = patternsList[index].split("_");
                return strs[1] + "_" + strs[2];
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton11 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jButton5.setText("Prepare small exact locations sample");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setText("Prepare small sample general");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setText("Full scale general POI type visit");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton8.setText("POI based visits sum one month");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jButton9.setText("POI based visits all days of one month");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jButton10.setText("Simple distance CBG-CBG trip (alpha)");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Amidst (DEPRECIATED)"));

        jButton1.setText("Test generate net");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Test inference");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Test generate simple net");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Test simple net");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton4)
                    .addComponent(jButton3))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton4))
                .addContainerGap(44, Short.MAX_VALUE))
        );

        jButton11.setText("Save CBG population probability");
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jScrollPane1.setViewportView(jList1);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 224, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton6)
                            .addComponent(jButton7)
                            .addComponent(jButton8)
                            .addComponent(jButton9)
                            .addComponent(jButton10)
                            .addComponent(jButton5)
                            .addComponent(jButton11))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton5)
                        .addGap(18, 18, 18)
                        .addComponent(jButton7)
                        .addGap(18, 18, 18)
                        .addComponent(jButton8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton9)
                        .addGap(18, 18, 18)
                        .addComponent(jButton10)
                        .addGap(18, 18, 18)
                        .addComponent(jButton11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 55, Short.MAX_VALUE)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        GraphicalModel.makeModelTest();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        GraphicalModel.inferenceTestModel();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        GraphicalModel.makeSimpleModelTest();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        GraphicalModel.inferenceSimpleModel();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        if (jList1.getSelectedIndex() != -1) {
            myParent.mainModel.safegraph.clearPatternsPlaces();
            myParent.mainModel.safegraph.loadPatternsPlacesSet(myParent.mainModel.datasetDirectory, jList1.getSelectedValue(), myParent.mainModel.allGISData, myParent.mainModel.ABM.studyScope, true, myParent.numProcessors);
            ArrayList<String[]> data = new ArrayList();
            //for (int i = 0; i < myParent.mainModel.safegraph.allPatterns.monthlyPatternsList.get(0).patternRecords.size(); i++) {
            for (int i = 0; i < 500; i++) {
                String[] row = new String[2];
                if (GISLocationDialog.isShop(myParent.mainModel.safegraph.allPatterns.monthlyPatternsList.get(0).patternRecords.get(i).place.naics_code) == true) {
                    row[0] = "shop";
                    row[1] = String.valueOf(myParent.mainModel.safegraph.allPatterns.monthlyPatternsList.get(0).patternRecords.get(i).raw_visit_counts);
                    data.add(row);
                }
                if (GISLocationDialog.isSchool(myParent.mainModel.safegraph.allPatterns.monthlyPatternsList.get(0).patternRecords.get(i).place.naics_code) == true) {
                    row[0] = "school";
                    row[1] = String.valueOf(myParent.mainModel.safegraph.allPatterns.monthlyPatternsList.get(0).patternRecords.get(i).raw_visit_counts);
                    data.add(row);
                }
                if (GISLocationDialog.isReligiousOrganization(myParent.mainModel.safegraph.allPatterns.monthlyPatternsList.get(0).patternRecords.get(i).place.naics_code) == true) {
                    row[0] = "religion";
                    row[1] = String.valueOf(myParent.mainModel.safegraph.allPatterns.monthlyPatternsList.get(0).patternRecords.get(i).raw_visit_counts);
                    data.add(row);
                }

            }
            CsvWriter writer = new CsvWriter();
            try {
                writer.write(new File("mobilityInference" + File.separator + "smallSample_" + jList1.getSelectedValue() + ".csv"), Charset.forName("US-ASCII"), data);
            } catch (IOException ex) {
                Logger.getLogger(GraphicalModelDialog.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        myParent.mainModel.safegraph.clearPatternsPlaces();
        myParent.mainModel.safegraph.loadPatternsPlacesSet(myParent.mainModel.datasetDirectory, jList1.getSelectedValue(), myParent.mainModel.allGISData, myParent.mainModel.ABM.studyScope, true, myParent.numProcessors);
        ArrayList<String[]> data = new ArrayList();
        //for (int i = 0; i < myParent.mainModel.safegraph.allPatterns.monthlyPatternsList.get(0).patternRecords.size(); i++) {
        int shop = 0;
        int school = 0;
        int religion = 0;
        for (int i = 0; i < 500; i++) {
            if (GISLocationDialog.isShop(myParent.mainModel.safegraph.allPatterns.monthlyPatternsList.get(0).patternRecords.get(i).place.naics_code) == true) {
                shop = shop + myParent.mainModel.safegraph.allPatterns.monthlyPatternsList.get(0).patternRecords.get(i).raw_visit_counts;
            }
            if (GISLocationDialog.isSchool(myParent.mainModel.safegraph.allPatterns.monthlyPatternsList.get(0).patternRecords.get(i).place.naics_code) == true) {
                school = school + myParent.mainModel.safegraph.allPatterns.monthlyPatternsList.get(0).patternRecords.get(i).raw_visit_counts;
            }
            if (GISLocationDialog.isReligiousOrganization(myParent.mainModel.safegraph.allPatterns.monthlyPatternsList.get(0).patternRecords.get(i).place.naics_code) == true) {
                religion = religion + myParent.mainModel.safegraph.allPatterns.monthlyPatternsList.get(0).patternRecords.get(i).raw_visit_counts;
            }
        }
        String[] row = new String[2];
        row[0] = "1";//SHOP
        row[1] = String.valueOf(shop);
        data.add(row);
        row = new String[2];
        row[0] = "2";//SCHOOL
        row[1] = String.valueOf(school);
        data.add(row);
        row = new String[2];
        row[0] = "3";//RELIGION
        row[1] = String.valueOf(religion);
        data.add(row);
        CsvWriter writer = new CsvWriter();
        try {
            writer.write(new File("mobilityInference" + File.separator + "smallSampleSimple_" + jList1.getSelectedValue() + ".csv"), Charset.forName("US-ASCII"), data);
        } catch (IOException ex) {
            Logger.getLogger(GraphicalModelDialog.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        myParent.mainModel.safegraph.clearPatternsPlaces();
        myParent.mainModel.safegraph.loadPatternsPlacesSet(myParent.mainModel.datasetDirectory, jList1.getSelectedValue(), myParent.mainModel.allGISData, myParent.mainModel.ABM.studyScope, true, myParent.numProcessors);
        ArrayList<String[]> data = new ArrayList();
        //for (int i = 0; i < myParent.mainModel.safegraph.allPatterns.monthlyPatternsList.get(0).patternRecords.size(); i++) {
        int shop = 0;
        int school = 0;
        int religion = 0;
        for (int i = 0; i < myParent.mainModel.safegraph.allPatterns.monthlyPatternsList.get(0).patternRecords.size(); i++) {
            if (GISLocationDialog.isShop(myParent.mainModel.safegraph.allPatterns.monthlyPatternsList.get(0).patternRecords.get(i).place.naics_code) == true) {
                shop = shop + myParent.mainModel.safegraph.allPatterns.monthlyPatternsList.get(0).patternRecords.get(i).raw_visit_counts;
            }
            if (GISLocationDialog.isSchool(myParent.mainModel.safegraph.allPatterns.monthlyPatternsList.get(0).patternRecords.get(i).place.naics_code) == true) {
                school = school + myParent.mainModel.safegraph.allPatterns.monthlyPatternsList.get(0).patternRecords.get(i).raw_visit_counts;
            }
            if (GISLocationDialog.isReligiousOrganization(myParent.mainModel.safegraph.allPatterns.monthlyPatternsList.get(0).patternRecords.get(i).place.naics_code) == true) {
                religion = religion + myParent.mainModel.safegraph.allPatterns.monthlyPatternsList.get(0).patternRecords.get(i).raw_visit_counts;
            }
        }
        String[] row = new String[2];
        row[0] = "1";//SHOP
        row[1] = String.valueOf(shop);
        data.add(row);
        row = new String[2];
        row[0] = "2";//SCHOOL
        row[1] = String.valueOf(school);
        data.add(row);
        row = new String[2];
        row[0] = "3";//RELIGION
        row[1] = String.valueOf(religion);
        data.add(row);
        CsvWriter writer = new CsvWriter();
        try {
            Files.createDirectories(Paths.get("mobilityInference" + File.separator + myParent.mainModel.ABM.studyScope));
            writer.write(new File("mobilityInference" + File.separator + myParent.mainModel.ABM.studyScope + File.separator + "FullSimple_" + jList1.getSelectedValue() + ".csv"), Charset.forName("US-ASCII"), data);
        } catch (IOException ex) {
            Logger.getLogger(GraphicalModelDialog.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        myParent.mainModel.safegraph.clearPatternsPlaces();
        myParent.mainModel.safegraph.loadPatternsPlacesSet(myParent.mainModel.datasetDirectory, jList1.getSelectedValue(), myParent.mainModel.allGISData, myParent.mainModel.ABM.studyScope, true, myParent.numProcessors);
        ArrayList<String[]> dataShops = new ArrayList();
        ArrayList<String[]> dataSchools = new ArrayList();
        ArrayList<String[]> dataReligiousLocations = new ArrayList();
        int counterShop = 0;
        int counterSchool = 0;
        int counterReligion = 0;
        for (int i = 0; i < myParent.mainModel.safegraph.allPatterns.monthlyPatternsList.get(0).patternRecords.size(); i++) {
            //for (int i = 0; i < 500; i++) {
            String[] row = new String[2];
            if (GISLocationDialog.isShop(myParent.mainModel.safegraph.allPatterns.monthlyPatternsList.get(0).patternRecords.get(i).place.naics_code) == true) {
                row[0] = String.valueOf(counterShop);
                row[1] = String.valueOf(myParent.mainModel.safegraph.allPatterns.monthlyPatternsList.get(0).patternRecords.get(i).raw_visit_counts);
                dataShops.add(row);
                counterShop = counterShop + 1;
            }
            if (GISLocationDialog.isSchool(myParent.mainModel.safegraph.allPatterns.monthlyPatternsList.get(0).patternRecords.get(i).place.naics_code) == true) {
                row[0] = String.valueOf(counterSchool);
                row[1] = String.valueOf(myParent.mainModel.safegraph.allPatterns.monthlyPatternsList.get(0).patternRecords.get(i).raw_visit_counts);
                dataSchools.add(row);
                counterSchool = counterSchool + 1;
            }
            if (GISLocationDialog.isReligiousOrganization(myParent.mainModel.safegraph.allPatterns.monthlyPatternsList.get(0).patternRecords.get(i).place.naics_code) == true) {
                row[0] = String.valueOf(counterReligion);
                row[1] = String.valueOf(myParent.mainModel.safegraph.allPatterns.monthlyPatternsList.get(0).patternRecords.get(i).raw_visit_counts);
                dataReligiousLocations.add(row);
                counterReligion = counterReligion + 1;
            }

        }
        CsvWriter writer = new CsvWriter();
        try {
            Files.createDirectories(Paths.get("mobilityInference" + File.separator + myParent.mainModel.ABM.studyScope));
            writer.write(new File("mobilityInference" + File.separator + myParent.mainModel.ABM.studyScope + File.separator + "shopLocVis_" + jList1.getSelectedValue() + ".csv"), Charset.forName("US-ASCII"), dataShops);
        } catch (IOException ex) {
            Logger.getLogger(GraphicalModelDialog.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            Files.createDirectories(Paths.get("mobilityInference" + File.separator + myParent.mainModel.ABM.studyScope));
            writer.write(new File("mobilityInference" + File.separator + myParent.mainModel.ABM.studyScope + File.separator + "schoolLocVis_" + jList1.getSelectedValue() + ".csv"), Charset.forName("US-ASCII"), dataSchools);
        } catch (IOException ex) {
            Logger.getLogger(GraphicalModelDialog.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            Files.createDirectories(Paths.get("mobilityInference" + File.separator + myParent.mainModel.ABM.studyScope));
            writer.write(new File("mobilityInference" + File.separator + myParent.mainModel.ABM.studyScope + File.separator + "religionLocVis_" + jList1.getSelectedValue() + ".csv"), Charset.forName("US-ASCII"), dataReligiousLocations);
        } catch (IOException ex) {
            Logger.getLogger(GraphicalModelDialog.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        myParent.mainModel.safegraph.clearPatternsPlaces();
        myParent.mainModel.safegraph.loadPatternsPlacesSet(myParent.mainModel.datasetDirectory, jList1.getSelectedValue(), myParent.mainModel.allGISData, myParent.mainModel.ABM.studyScope, true, myParent.numProcessors);
        ArrayList<String[]> dataShops = new ArrayList();
        ArrayList<String[]> dataSchools = new ArrayList();
        ArrayList<String[]> dataReligiousLocations = new ArrayList();
        int counterShop = 0;
        int counterSchool = 0;
        int counterReligion = 0;
        for (int i = 0; i < myParent.mainModel.safegraph.allPatterns.monthlyPatternsList.get(0).patternRecords.size(); i++) {
            //for (int i = 0; i < 500; i++) {
            String[] row = new String[myParent.mainModel.safegraph.allPatterns.monthlyPatternsList.get(0).patternRecords.get(i).visits_by_day.length + 1];
            if (GISLocationDialog.isShop(myParent.mainModel.safegraph.allPatterns.monthlyPatternsList.get(0).patternRecords.get(i).place.naics_code) == true) {
                row[0] = String.valueOf(counterShop);
                for (int j = 0; j < myParent.mainModel.safegraph.allPatterns.monthlyPatternsList.get(0).patternRecords.get(i).visits_by_day.length; j++) {
                    row[j + 1] = String.valueOf(myParent.mainModel.safegraph.allPatterns.monthlyPatternsList.get(0).patternRecords.get(i).visits_by_day[j]);
                }
                dataShops.add(row);
                counterShop = counterShop + 1;
            }
            if (GISLocationDialog.isSchool(myParent.mainModel.safegraph.allPatterns.monthlyPatternsList.get(0).patternRecords.get(i).place.naics_code) == true) {
                row[0] = String.valueOf(counterSchool);
                for (int j = 0; j < myParent.mainModel.safegraph.allPatterns.monthlyPatternsList.get(0).patternRecords.get(i).visits_by_day.length; j++) {
                    row[j + 1] = String.valueOf(myParent.mainModel.safegraph.allPatterns.monthlyPatternsList.get(0).patternRecords.get(i).visits_by_day[j]);
                }
                dataSchools.add(row);
                counterSchool = counterSchool + 1;
            }
            if (GISLocationDialog.isReligiousOrganization(myParent.mainModel.safegraph.allPatterns.monthlyPatternsList.get(0).patternRecords.get(i).place.naics_code) == true) {
                row[0] = String.valueOf(counterReligion);
                for (int j = 0; j < myParent.mainModel.safegraph.allPatterns.monthlyPatternsList.get(0).patternRecords.get(i).visits_by_day.length; j++) {
                    row[j + 1] = String.valueOf(myParent.mainModel.safegraph.allPatterns.monthlyPatternsList.get(0).patternRecords.get(i).visits_by_day[j]);
                }
                dataReligiousLocations.add(row);
                counterReligion = counterReligion + 1;
            }

        }
        CsvWriter writer = new CsvWriter();
        try {
            writer.write(new File("mobilityInference" + File.separator + myParent.mainModel.ABM.studyScope + File.separator + "shopLocVisDaily_" + jList1.getSelectedValue() + ".csv"), Charset.forName("US-ASCII"), dataShops);
        } catch (IOException ex) {
            Logger.getLogger(GraphicalModelDialog.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            writer.write(new File("mobilityInference" + File.separator + myParent.mainModel.ABM.studyScope + File.separator + "schoolLocVisDaily_" + jList1.getSelectedValue() + ".csv"), Charset.forName("US-ASCII"), dataSchools);
        } catch (IOException ex) {
            Logger.getLogger(GraphicalModelDialog.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            writer.write(new File("mobilityInference" + File.separator + myParent.mainModel.ABM.studyScope + File.separator + "religionLocVisDaily_" + jList1.getSelectedValue() + ".csv"), Charset.forName("US-ASCII"), dataReligiousLocations);
        } catch (IOException ex) {
            Logger.getLogger(GraphicalModelDialog.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        myParent.mainModel.safegraph.clearPatternsPlaces();
        myParent.mainModel.safegraph.loadPatternsPlacesSet(myParent.mainModel.datasetDirectory, jList1.getSelectedValue(), myParent.mainModel.allGISData, myParent.mainModel.ABM.studyScope, true, myParent.numProcessors);
        ArrayList<CensusBlockGroup> shopCBGs = new ArrayList();
        ArrayList<CensusBlockGroup> schoolCBGs = new ArrayList();
        ArrayList<CensusBlockGroup> religionCBGs = new ArrayList();
        ArrayList<CensusBlockGroup> allCBGs = new ArrayList();
        for (int i = 0; i < ((City) (myParent.mainModel.ABM.studyScopeGeography)).censusTracts.size(); i++) {
            for (int j = 0; j < ((City) (myParent.mainModel.ABM.studyScopeGeography)).censusTracts.get(i).censusBlocks.size(); j++) {
                allCBGs.add(((City) (myParent.mainModel.ABM.studyScopeGeography)).censusTracts.get(i).censusBlocks.get(j));
            }
        }
        for (int i = 0; i < myParent.mainModel.safegraph.allPatterns.monthlyPatternsList.get(0).patternRecords.size(); i++) {
            if (GISLocationDialog.isShop(myParent.mainModel.safegraph.allPatterns.monthlyPatternsList.get(0).patternRecords.get(i).place.naics_code) == true) {
                shopCBGs.add(myParent.mainModel.safegraph.allPatterns.monthlyPatternsList.get(0).patternRecords.get(i).poi_cbg_censusBlock);
            }
            if (GISLocationDialog.isSchool(myParent.mainModel.safegraph.allPatterns.monthlyPatternsList.get(0).patternRecords.get(i).place.naics_code) == true) {
                schoolCBGs.add(myParent.mainModel.safegraph.allPatterns.monthlyPatternsList.get(0).patternRecords.get(i).poi_cbg_censusBlock);
            }
            if (GISLocationDialog.isReligiousOrganization(myParent.mainModel.safegraph.allPatterns.monthlyPatternsList.get(0).patternRecords.get(i).place.naics_code) == true) {
                religionCBGs.add(myParent.mainModel.safegraph.allPatterns.monthlyPatternsList.get(0).patternRecords.get(i).poi_cbg_censusBlock);
            }
        }
        ArrayList<ArrayList<Double>> cBGShopDistances = new ArrayList();
        ArrayList<ArrayList<Double>> cBGSchoolDistances = new ArrayList();
        ArrayList<ArrayList<Double>> cBGReligionDistances = new ArrayList();
        for (int i = 0; i < allCBGs.size(); i++) {
            ArrayList<Double> distToShops = new ArrayList();
            for (int j = 0; j < shopCBGs.size(); j++) {
                distToShops.add(Math.sqrt(Math.pow(allCBGs.get(i).lat - shopCBGs.get(j).lat, 2) + Math.pow(allCBGs.get(i).lon - shopCBGs.get(j).lon, 2)));
            }
            cBGShopDistances.add(distToShops);
            ArrayList<Double> distToSchools = new ArrayList();
            for (int j = 0; j < schoolCBGs.size(); j++) {
                distToSchools.add(Math.sqrt(Math.pow(allCBGs.get(i).lat - schoolCBGs.get(j).lat, 2) + Math.pow(allCBGs.get(i).lon - schoolCBGs.get(j).lon, 2)));
            }
            cBGSchoolDistances.add(distToSchools);
            ArrayList<Double> distToReligion = new ArrayList();
            for (int j = 0; j < religionCBGs.size(); j++) {
                distToReligion.add(Math.sqrt(Math.pow(allCBGs.get(i).lat - religionCBGs.get(j).lat, 2) + Math.pow(allCBGs.get(i).lon - religionCBGs.get(j).lon, 2)));
            }
            cBGReligionDistances.add(distToReligion);
        }
//        ArrayList<ArrayList<Double>> cBGShopProbs = new ArrayList();
//        ArrayList<ArrayList<Double>> cBGSchoolProbs = new ArrayList();
//        ArrayList<ArrayList<Double>> cBGReligionProbs = new ArrayList();
//
//        for (int i = 0; i < cBGShopDistances.size(); i++) {
//            ArrayList<Double> row = new ArrayList();
//            for (int j = 0; j < cBGShopDistances.get(i).size(); j++) {
//                row.add(1.0 - cBGShopProbs.get(i).get(j));
//            }
//            cBGShopProbs.add(row);
//        }
//        for (int i = 0; i < cBGSchoolDistances.size(); i++) {
//            ArrayList<Double> row = new ArrayList();
//            for (int j = 0; j < cBGSchoolDistances.get(i).size(); j++) {
//                row.add(1.0 - cBGSchoolProbs.get(i).get(j));
//            }
//            cBGSchoolProbs.add(row);
//        }
//        for (int i = 0; i < cBGReligionDistances.size(); i++) {
//            ArrayList<Double> row = new ArrayList();
//            for (int j = 0; j < cBGReligionDistances.get(i).size(); j++) {
//                row.add(1.0 - cBGReligionProbs.get(i).get(j));
//            }
//            cBGReligionProbs.add(row);
//        }

        ArrayList<String[]> cBGShopDistancesStr = new ArrayList();
        ArrayList<String[]> cBGSchoolDistancesStr = new ArrayList();
        ArrayList<String[]> cBGReligionDistancesStr = new ArrayList();
        for (int i = 0; i < cBGShopDistances.size(); i++) {
            String[] row = new String[cBGShopDistances.get(i).size()];
            for (int j = 0; j < cBGShopDistances.get(i).size(); j++) {
                row[j] = String.valueOf(cBGShopDistances.get(i).get(j));
            }
            cBGShopDistancesStr.add(row);
        }
        for (int i = 0; i < cBGSchoolDistances.size(); i++) {
            String[] row = new String[cBGSchoolDistances.get(i).size()];
            for (int j = 0; j < cBGSchoolDistances.get(i).size(); j++) {
                row[j] = String.valueOf(cBGSchoolDistances.get(i).get(j));
            }
            cBGSchoolDistancesStr.add(row);
        }
        for (int i = 0; i < cBGReligionDistances.size(); i++) {
            String[] row = new String[cBGReligionDistances.get(i).size()];
            for (int j = 0; j < cBGReligionDistances.get(i).size(); j++) {
                row[j] = String.valueOf(cBGReligionDistances.get(i).get(j));
            }
            cBGReligionDistancesStr.add(row);
        }
        CsvWriter writer = new CsvWriter();
        try {
            writer.write(new File("mobilityInference" + File.separator + myParent.mainModel.ABM.studyScope + File.separator + "CBGShopDists_" + jList1.getSelectedValue() + ".csv"), Charset.forName("US-ASCII"), cBGShopDistancesStr);
        } catch (IOException ex) {
            Logger.getLogger(GraphicalModelDialog.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            writer.write(new File("mobilityInference" + File.separator + myParent.mainModel.ABM.studyScope + File.separator + "CBGSchoolDists_" + jList1.getSelectedValue() + ".csv"), Charset.forName("US-ASCII"), cBGSchoolDistancesStr);
        } catch (IOException ex) {
            Logger.getLogger(GraphicalModelDialog.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            writer.write(new File("mobilityInference" + File.separator + myParent.mainModel.ABM.studyScope + File.separator + "CBGReligionDists_" + jList1.getSelectedValue() + ".csv"), Charset.forName("US-ASCII"), cBGReligionDistancesStr);
        } catch (IOException ex) {
            Logger.getLogger(GraphicalModelDialog.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton10ActionPerformed

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        ArrayList<Integer> cBGVals = new ArrayList();
        ArrayList<Double> cBGProbs = new ArrayList();
        double sumPops = 0;
        for (int i = 0; i < ((City) (myParent.mainModel.ABM.studyScopeGeography)).censusTracts.size(); i++) {
            for (int j = 0; j < ((City) (myParent.mainModel.ABM.studyScopeGeography)).censusTracts.get(i).censusBlocks.size(); j++) {
                cBGVals.add(((City) (myParent.mainModel.ABM.studyScopeGeography)).censusTracts.get(i).censusBlocks.get(j).population);
                sumPops = sumPops + ((City) (myParent.mainModel.ABM.studyScopeGeography)).censusTracts.get(i).censusBlocks.get(j).population;
            }
        }
        int counter = 0;
        for (int i = 0; i < ((City) (myParent.mainModel.ABM.studyScopeGeography)).censusTracts.size(); i++) {
            for (int j = 0; j < ((City) (myParent.mainModel.ABM.studyScopeGeography)).censusTracts.get(i).censusBlocks.size(); j++) {
                cBGProbs.add(cBGVals.get(counter) / sumPops);
                counter = counter + 1;
            }
        }
        ArrayList<String[]> cBGPopProb = new ArrayList();
        for (int i = 0; i < cBGProbs.size(); i++) {
            String[] row = new String[1];
            row[0] = String.valueOf(cBGProbs.get(i));
            cBGPopProb.add(row);
        }
        CsvWriter writer = new CsvWriter();
        try {
            writer.write(new File("mobilityInference_fixed" + File.separator + myParent.mainModel.ABM.studyScope + "_CBGPopProb" + ".csv"), Charset.forName("US-ASCII"), cBGPopProb);
            ArrayList<String[]> pop = new ArrayList();
            String[] row = new String[1];
            row[0] = String.valueOf(((City) (myParent.mainModel.ABM.studyScopeGeography)).population);
            pop.add(row);
            writer.write(new File("mobilityInference_fixed" + File.separator + myParent.mainModel.ABM.studyScope + "_population" + ".csv"), Charset.forName("US-ASCII"), pop);
        } catch (IOException ex) {
            Logger.getLogger(GraphicalModelDialog.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton11ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JList<String> jList1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
